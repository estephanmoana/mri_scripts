#! /bin/bash

# Rotate the bvecs file to compensate modifications imposed by the FSL command "eddy_correct"

# Sourcing of functions library files #
. mainscrcall_funclib

# Setting Ctrl + C as key combination to go back to PROCESSING menu. Also signals to the log file (=if there is one) that this script was interrupted
trap "echo -en '\n\nGoing back to the PROCESSING menu '; sleep 2; log_file_scripts_used interrupt; exit" SIGINT

# Checking if variables are not empty
emptvar=${MEDIA}
var_checked="THE MAIN FOLDER HOLDING FMRI DATA"
checkemptvar

emptvar=${EXPERIMENT}
var_checked="THE EXPERIMENT NAME"
checkemptvar

emptvar="${SUBJLIST}"
var_checked="THE SUBJECT(S) TO BE PROCESSED"
checkemptvar

##########			FUNCTIONS USED IN THIS SCRIPT			##########
function dwi_rotate_bvecs {
# This function will rotate the bvecs file to compensate modifications imposed by the FSL command "eddy_correct"

for SUBJ in ${SUBJLIST}
do
	# First checking if there is any DWI file for this subject
	bvecs_files_list=`ls ${dwi_mainfolder_path}/${SUBJ}/${dwi_subject_subfolder}/${bvecs_filename} 2> /dev/null`

	if [ -n "${bvecs_files_list}" ]
	then
		for item in ${bvecs_files_list}
		do
			# Storing each DWI file and its folder into a variable. Observe the use of a dot before the wildcard in the sed command - necessary for it to see the asterisk as a wild card - and also single quotes
			bvecs_filename=`echo ${item} | awk -F/ '{print $NF}'`
			DWI_directory=`echo ${item} | sed 's!'${dwi_mainfolder_path}/${SUBJ}/'!!' | sed 's!'/${bvecs_filename}'!!'`

			# Renaming the original bvecs file
			mv ${dwi_mainfolder_path}/${SUBJ}/${DWI_directory}/${bvecs_filename} ${dwi_mainfolder_path}/${SUBJ}/${DWI_directory}/${bvecs_filename}_ORIG 2> /dev/null

			# Collecting the bvecs file to be processed for the subject into a variable
			bvecs_file_process=`ls ${dwi_mainfolder_path}/${SUBJ}/${DWI_directory}/bvecs_ORIG 2> /dev/null`

			if [ -n "${bvecs_file_process}" ] # Sanity check if the "bvecs_ORIG" was generated
			then
				ecclog_file=`ls ${dwi_mainfolder_path}/${SUBJ}/${DWI_directory}/${dwi_eddycorrect_logfile} 2> /dev/null`

				#####################################
				###### Preparing the PPSS file using the command "fdt_rotate_bvecs" to proceed with bvecs file rotation according to the eddy current and head motion correction rotations needed. Notice the redirection of both STDOUT and STDERR to /dev/null using "&>", since "fdt_correct_bvecs" outputs a line for each volume processed. Note that "fdt_rotate_bvecs" it is not an official part of FSL, but rather downloaded from a post from FSL mailing list
				# Putting the full command into a variable
				command_processing=`echo -e "fdt_rotate_bvecs ${bvecs_file_process} ${dwi_mainfolder_path}/${SUBJ}/${DWI_directory}/${bvecs_filename} ${ecclog_file} &> /dev/null"`
				
				# Adding the command to the ppss processing text file
				echo "${command_processing}" >> ${temp_folder}/${ppss_command_file}

				##### Creating a LOG file with the commands used for later QA if needed #####
				echo "OS name and version: ${os_nameandversion}; Command: fdt_rotate_bvecs; FSL `cat $FSLDIR/etc/fslversion`; Date and time: `current_date_time 2`" > ${dwi_mainfolder_path}/${SUBJ}/${DWI_directory}/LOGFILE_diffusion-tensor-model-fitting_dtifit_${bvecs_filename}.txt

				echo -e "Command \"fdt_rotate_bvecs\" to rotate the bvecs file to the eddy-corrected DWI file" >> ${dwi_mainfolder_path}/${SUBJ}/${DWI_directory}/LOGFILE_diffusion-tensor-model-fitting_dtifit_${bvecs_filename}.txt

				echo -e "\n${command_processing}" >> ${dwi_mainfolder_path}/${SUBJ}/${DWI_directory}/LOGFILE_diffusion-tensor-model-fitting_dtifit_${bvecs_filename}.txt
				#####################################

				# Gathering this subject into a variable for processing. This will be used by the function "subjects_processed" in functionslibr_FSL
				subj_process="${subj_process} ${SUBJ}"
			else
				echo -e "\n"
				echo -e "##### No bvecs file was found for subject \"$SUBJ\" #####"
				echo -e "Skipping this subject for bvecs rotation\n"

				echo -en "Press any key to continue "
				read -n1 anykey

				# Gathering this subject into a variable for NOT processing. This will be used by the function "subjects_processed" in functionslibr_FSL
				subj_NOT_process="${subj_NOT_process} ${SUBJ}"
			fi
		done
	fi
done
}

###########################################################################
###############			MAIN MENU ROUTINE			###############
###########################################################################

##### 			VARIABLES TO BE USED IN THIS SCRIPT 		#####
# Assigning a variable to hold the main location of the files generated by this script
temp_folder=/tmp/ppss_tempdir # Where the temporary files will be held
ppss_command_file=eddy_correct_files_list.txt

dwi_mainfolder_path=${SUBJS_FOLDERS_PATH} # Where the DWI files are. Can be modified by the user in this script.
dwi_subject_subfolder=DWI/DWI_* # To be used with "ls" command: The path to the subfolder within each subject's folder
bvecs_filename=bvecs # Name of the bvecs file
dwi_eddycorrect_logfile=data_DWI01_edccorr.ecclog # The log file from eddy motion correction
######################################################################

######### Script Main menu - Informing the user what this script does and asking for input #########
clear

# Changing directory to /tmp in case the script comits some error - this will make any commands to be run within /tmp, preventing damage to the file system
cd /tmp

# Removing temporary folders and files created, just in case they were not deleted properly by a previously ran script
rm -r ${temp_folder} 2> /dev/null

# Creating a temporary folder to hold the text file with the subjects to be processed
mkdir ${temp_folder} 2> /dev/null

echo -e "This program will rotate the B matrix following eddy current distortions and head motion correction"
echo -e "This way, the vectors of gradient directions (bvecs) will be rotated accondingly to the rotations done previously above\n"

##### GATHERING THE PATH TO THE ANALYSIS FOLDER #####
# FUNCTION CALL: calls the function "analysis_mainfolder" in "mainscrcall_funclib" to allow the user to select the path to the subject's folders
analysis_mainfolder DWI

# Assigning the output variable from the function above to a local variable
dwi_mainfolder_path=${ANALYSIS_MAINFOLDER_PATH}
######################################################

# MAIN MENU
echo -e "\n"
echo -e "The original \"bvecs\" file will be renamed to \"bvecs_ORIG\", and the output of this script will be named \"bvecs\""

echo -e "\t1. Proceed with bvecs rotation"
echo -e "\t0. Back to main menu"

# Ask for user input to continue
echo
echo -en "Please enter your option: "
read rotatebvecs_process_steps

while [ 1 ]
do
	case ${rotatebvecs_process_steps} in
	0)
		echo
		echo -en "Going back to the PROCESSING menu "
		sleep 2

		break
		;;
	1)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "dwi_rotate_bvecs:Rotate the B matrix following eddy current distortions and head motion correction" FSL "(dwi_rotate_bvecs) fdt_rotate_bvecs"

		####### MAIN PATH TO SUBJECTS FOLDER CHECK ##############
		# Checking if used the original path to DWI files or the user entered another one ("default_path" variable originates from function "DWI_mainfolder" in "functionslibr_FSL")
		if [ ${default_path} = yes ]
		then
			# Creating a log file. STEP 1.5 of 2 = midscript call
			# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. Reason for midscript call
			log_file_scripts_used midscript "Used the default path for DWI data: ${dwi_mainfolder_path}"

		elif [ ${default_path} = no ]
		then
			# Creating a log file. STEP 1.5 of 2 = midscript call
			# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. Reason for midscript call
			log_file_scripts_used midscript "Used an alternative path for DWI data: ${dwi_mainfolder_path}"
		fi
		#########################################################

		# Giving information to the user on what this script will do
		echo
		echo -e "This script will rotate bvecs according to the rotations made during eddy current distortions and head motion correction for the subjects listed:\n"

		# Making the subjects within the "SUBJLIST" variable to be listed in a numbered list for the user
		# Establishing tne initial subject numbering
		count=1

		for subj in ${SUBJLIST}
		do
			# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
			counter=`printf "%02d" ${count}`

			echo "${counter}) ${subj}"

			# Adding a unit to the numbering variable
			((count++))
		done

		# Cleaning the contents of the variable below
		unset count counter

		# Warning the user about the script assumptions
		echo
		echo -e "*** Please note that this script expects bvecs file and a log file for the eddy current correction named \"${dwi_eddycorrect_logfile}\" ***"
		echo -e "If it does not find these files, it will generate an error"
		echo -en "Press any key to continue "
		read -n1 anykey

		# Telling the user that processing will start now
		echo
		echo -e "### Start rotating bvecs for all subjects ###"

		# FUNCTION CALL: Calls the function "dwi_rotate_bvecs" to rotate the bvecs file to compensate modifications imposed by the FSL command "eddy_correct"
		dwi_rotate_bvecs

		# Checking if there is a PPSS processing file
		if [ -f "${temp_folder}/${ppss_command_file}" ] # Checking if this file exists and is a file
		then
			# Calling the function "parallel_processing_ppss" to run the motion outliers command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
			# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
			parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

			echo
			echo -e "Finished processing at: `current_date_time 2`"
		else
			echo
			echo -en "*** No PPSS processing file was generated - please check the reason ***"
			echo -en "Press any key to continue "
			read -n1 anykey
		fi

		###### Listing the subjects processed ######
		# FUNCTION CALL: Calls the function "subjects_listed2process" in "mainscrcall_funclib" to list to the user all subjects processed and those not processed by the script invoking it
		subjects_listed2process
		################################################

		echo
		echo -e "The ORIGINAL bvecs file was renamed to "bvecs_ORIG", and the rotated file is now named "bvecs". Both are located within the \"DWI/DWI_XXdirs_XX\" folder for  each subject"

		# Ask for user input to continue
		echo
		echo -en "Press any key to continue to the PROCESSING menu "
		read -n1 anykey

		break
		;;
	*)
		echo -e "No valid option chosen"
		echo -en "Please re-enter an option "

		sleep 2
		;;
	esac
done

# Creating a log file. STEP 2 of 2 = finish call
# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 1 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. List of subjects processed
log_file_scripts_used finish "${SUBJLIST}"

# Removing temporary folders and files created
rm -r ${temp_folder} 2> /dev/null