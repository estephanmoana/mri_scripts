#! /bin/bash

# This script will swap the NEUROLOGICAL orientation of the thesis data to RADIOLOGICAL as recommended in the FSL website <http://www.fmrib.ox.ac.uk/fslfaq/#general_lr> #

###########################################################################################################
## Have to update this to use "fslreorient2std" instead of "fslorient" and "fslswapdim"##
## See post in FSL listserv: https://www.jiscmail.ac.uk/cgi-bin/webadmin?A2=ind1011&L=FSL&D=0&P=265762 ##
## 11/19/2010 ##
## DONE
###########################################################################################################

# Sourcing of functions library files #
. mainscrcall_funclib

# Setting Ctrl + C as key combination to go back to PROCESSING menu. Also signals to the log file (=if there is one) that this script was interrupted
trap "echo -en '\n\nGoing back to the PROCESSING menu '; sleep 2; log_file_scripts_used interrupt; exit" SIGINT

# Checking if variables are not empty
emptvar=${MEDIA}
var_checked="THE MAIN FOLDER HOLDING MRI DATA"
checkemptvar

emptvar=${EXPERIMENT}
var_checked="THE EXPERIMENT NAME"
checkemptvar

emptvar="${SUBJLIST}"
var_checked="THE SUBJECT(S) TO BE PROCESSED"
checkemptvar

emptvar="${SUBJS_FOLDERS_PATH}"
var_checked="THE FOLDER CONTAINING ALL SUBJECTS' FOLDERS"
checkemptvar

# echo -e "Checking if the folder for analysis was created\n"

# cd ${MEDIA}
# foldercheck=${EXPERIMENT}/analysis
# checkfoldexist
cd /tmp

##########			FUNCTIONS USED IN THIS SCRIPT			##########
function contrast_types_functional_resting_runs {
# It uses 1 parameter:
# 1) Path to the folder holding the temporary files for the script that called this function

local contrast_type_processing="$1" # Basename of the file to be used

# Allowing the user to enter the contrasts for the images to be processed
while [ 1 ]
do
	# Establishing the contrasts available for the user to choose
	contrasts_available="BOLD ASL"

	echo
	echo -e "*** Before processing FUNCTIONAL or RESTING files, you need to choose the contrasts each run used ***"
	echo -e "Please choose the contrasts for the *** ${contrast_type_processing} *** images to be processed:\n"

	# Making the subjects within the variable to be listed in a numbered list for the user
	# Establishing the initial contrast numbering
	contrast_number=1

	for contrast in ${contrasts_available}
	do
		contrast_number=`printf "%02d" ${contrast_number}`
		echo "${contrast_number}) ${contrast}"

		# Adding a unit to the numbering variable
		# Note the use of "10#" - this is because numbers like 008 or 009 are interpreted as octal by bash during arithmetic operations. So by using "10#" you tell bash that these number are base 10
		contrast_number=$[ 10#$contrast_number + 1 ]
	done

	# Cleanig the contents of the numbering variable
	unset contrast_number

	# Now asking for user input to which subjects are to have their files re-oriented
	echo
	echo -en "Enter here the number for each contrast to be used (use space in between if more than one, enter \"all\" for the whole list): "
	read contrasts_choosen

	if [ -n "${contrasts_choosen}" ] && [ "${contrasts_choosen}" != all ] # Checking if this variable is non-zero in length and does NOT include all contrasts listed
	then
		# Establishing tne initial contrast numbering
		contrast_number=1

		# Collecting the contrasts into a variable to be used in the FUNCTION "NUMBERED_LIST" (functionslibr_FSL)
		var1_available=`for contrast in ${contrasts_available}; do echo "${contrast_number}=${contrast}"; contrast_number=$[ $contrast_number + 1 ]; done` # variable with all the files in a numbered list
		var2_list=${contrasts_choosen} # The numbers chosen by the user corresponding to the files to be used

		# Calling the function "numbered_list_display" to present the anatomical files available in a numbered list to the user. Note the parameters to be passed on to the function
		numbered_list_display "${var1_available}" "${var2_list}"

		# Retrieving the results of the function above from the variable "files_to_use" into a variable to be used by the present script
		contrast_choosen="${files_to_use}"

		# Cleaning the contents of the variables below
		unset files_to_use

	elif [ -n "${contrasts_choosen}" ] && [ "${contrasts_choosen}" = all ] # Checking if this variable is non-zero in length and does NOT include all contrasts listed
	then
		# Collecting all contrasts listed into the variable "contrast_choosen"
		contrast_choosen="${contrasts_available}"
	fi

	echo
	echo -e "You have selected the following contrasts:\n"

	# Making the subjects within the variable to be listed in a numbered list for the user
	# Establishing the initial contrast numbering
	contrast_number=1

	for contrast in ${contrast_choosen}
	do
		contrast_number=`printf "%02d" ${contrast_number}`
		echo "${contrast_number}) ${contrast}"

		# Adding a unit to the numbering variable
		# Note the use of "10#" - this is because numbers like 008 or 009 are interpreted as octal by bash during arithmetic operations. So by using "10#" you tell bash that these number are base 10
		contrast_number=$[ 10#$contrast_number + 1 ]
	done

	# Cleaning the contents of the numbering variable
	unset contrast_number

	echo
	echo -en "Is this correct?(y/n) "
	read yesno

	if [ ${yesno} = y ]
	then
		# FINAL VARIABLE holding the CONTRASTS to be used
		contrast_list="${contrast_choosen}"
		break
	else
		echo
		echo -en "Please corrected the contrasts entered "

		# Cleaning the contents for the variable below for correction
		unset contrasts_choosen

		sleep 2
	fi
done
}

function files_types_to_process {
########################################################################
##### Routine to choose the files to be processed for each subject #####
########################################################################

echo
echo -e "Do you want to process for *** ALL SUBJECTS ***:"
echo -e "\t1. Anatomical + Functional files (+ field maps if present)"
echo -e "\t1.1. Anatomical files only"
echo -e "\t1.2. Functional files only (+ field maps if present)\n"

echo -e "\tOther file types:"
echo -e "\t2. Resting runs (BOLD, ASL) (+ field maps if present) files"
echo -e "\t3. Diffusion weighted imaging (DWI) (+ field maps if present) files"
echo -e "\t0. Back to main menu\n"

echo -en "Please enter your option here and press enter: "
read frunproc

case ${frunproc} in
1)
	# Alerting the user to be sure that he wants to re-orient all files for the subjects listed
	echo -e "\n"
	echo -e "\tThis will only change your images orientation to match that of the MNI template\n"

	echo -e "\tOriginal images will keep their names and folder location"
	echo -e "\tThe newly oriented file will be renamed to \"filename_stdMNI\", and will be located in the same folder as the original file\n"

	# Calling the function "contrast_types_functional_resting_runs" so the user can choose the CONTRASTS for the FUNCTIONAL or RESTING runs. Note use of parameter to indicate the imaging type being processed
	contrast_types_functional_resting_runs FUNCTIONAL

	# This will re-oriented all files within the subjects folder, including anatomicals and functionals
	for SUBJ in ${SUBJLIST}
	do
		echo -e "\n"

		echo -e "#######################################################"
		echo -e "Processing ANATOMICAL + FUNCTIONAL files for subject: *** ${SUBJ} ***"
		echo -e "#######################################################"

		echo
		echo -e "Processing ANATOMICAL files"

		# Calling function "reorient_modality_2std" to reorient ANATOMICAL files using the appropriate parameter
		reorient_modality_2std ANATOMICAL

		echo
		echo -e "Processing FUNCTIONAL files"

		# Calling function "reorient_modality_2std" to reorient FUNCTIONAL files using the appropriate parameter
		reorient_modality_2std FUNCTIONAL

		echo
		echo -e "Done re-orienting all files for subject: \"${SUBJ}\""
	done
	;;
1.1)
	# Alerting the user to be sure that he wants to re-orient all files for the subjects listed
	echo -e "\n"
	echo -e "\tThis will only change your images orientation to match that of the MNI template\n"

	echo -e "\tOriginal images will keep their names and folder location"
	echo -e "\tThe newly oriented file will be renamed to \"filename_stdMNI\", and will be located in the same folder as the original file\n"

	# This will re-oriented all files within the subjects folder, including anatomicals and functionals
	for SUBJ in ${SUBJLIST}
	do
		echo -e "\n"

		echo -e "#######################################################"
		echo -e "Processing ANATOMICAL files for subject: *** ${SUBJ} ***"
		echo -e "#######################################################"

		echo
		echo -e "Processing ANATOMICAL files"

		# Calling function "reorient_modality_2std" to reorient ANATOMICAL files using the appropriate parameter
		reorient_modality_2std ANATOMICAL

		echo
		echo -e "Done re-orienting all files for subject: \"${SUBJ}\""
	done
	;;
1.2)
	# Alerting the user to be sure that he wants to re-orient all files for the subjects listed
	echo -e "\n"
	echo -e "\tThis will only change your images orientation to match that of the MNI template\n"

	echo -e "\tOriginal images will keep their names and folder location"
	echo -e "\tThe newly oriented file will be renamed to \"filename_stdMNI\", and will be located in the same folder as the original file\n"

	# Calling the function "contrast_types_functional_resting_runs" so the user can choose the CONTRASTS for the FUNCTIONAL or RESTING runs. Note use of parameter to indicate the imaging type being processed
	contrast_types_functional_resting_runs FUNCTIONAL

	# This will re-oriented all files within the subjects folder, including anatomicals and functionals
	for SUBJ in ${SUBJLIST}
	do
		echo -e "\n"

		echo -e "#######################################################"
		echo -e "Processing FUNCTIONAL files for subject: *** ${SUBJ} ***"
		echo -e "#######################################################"

		echo
		echo -e "Processing FUNCTIONAL files"

		# Calling function "reorient_modality_2std" to reorient FUNCTIONAL files using the appropriate parameter
		reorient_modality_2std FUNCTIONAL

		echo
		echo -e "Done re-orienting all files for subject: \"${SUBJ}\""
	done
	;;
2)
	# Alerting the user to be sure that he wants to re-orient all files for the subjects listed
	echo -e "\n"
	echo -e "\tThis will only change your images orientation to match that of the MNI template\n"

	echo -e "\tOriginal images will keep their names and folder location"
	echo -e "\tThe newly oriented file will be renamed to \"filename_stdMNI\", and will be located in the same folder as the original file\n"

	# Calling the function "contrast_types_functional_resting_runs" so the user can choose the CONTRASTS for the FUNCTIONAL or RESTING runs. Note use of parameter to indicate the imaging type being processed
	contrast_types_functional_resting_runs RESTING

	# This will re-oriented all files within the subjects folder, including anatomicals and functionals
	for SUBJ in ${SUBJLIST}
	do
		echo -e "\n"

		echo -e "#######################################################"
		echo -e "Processing RESTING files for subject: *** ${SUBJ} ***"
		echo -e "#######################################################"

		# Calling function "reorient_modality_2std" to reorient RESTING files using the appropriate parameter
		reorient_modality_2std RESTING

		echo
		echo -e "Done re-orienting all files for subject: \"${SUBJ}\""
	done
	;;
3)
	# Alerting the user to be sure that he wants to re-orient all files for the subjects listed
	echo -e "\n"
	echo -e "\tThis will only change your images orientation to match that of the MNI template\n"

	echo -e "\tOriginal images will keep their names and folder location"
	echo -e "\tThe newly oriented file will be renamed to \"filename_stdMNI\", and will be located in the same folder as the original file\n"

	# This will re-oriented all files within the subjects folder, including anatomicals and functionals
	for SUBJ in ${SUBJLIST}
	do
		echo -e "\n"

		echo -e "#######################################################"
		echo -e "Processing DWI files for subject: *** ${SUBJ} ***"
		echo -e "#######################################################"

		# Calling function "reorient_modality_2std" to reorient DWI files using the appropriate parameter
		reorient_modality_2std DWI

		echo
		echo -e "Done re-orienting all files for subject: \"${SUBJ}\""
	done
	;;
0)
	echo -e "\n\n"
	echo -en "\tGoing back to the PROCESSING menu "
	sleep 2

	exit ;;
*)
	echo
	echo -e "No valid option chosen"
	echo -en "Please enter a valid option "

	sleep 2
	;;
esac
}

function reorient_modality_2std {
#####################################################################
##### VARIABLES TO BE USED IN THIS FUNCTION AND SUBSEQUENT ONES #####
# Variable holding data type to be processed
data_type=$1

# Variable Putting the data type into small case
datatype_lowercase=`echo ${data_type} | tr '[:upper:]' '[:lower:]'`

# Checking what kind of data will be processed, and defining needed variables accordingly
if [ ${data_type} = ANATOMICAL ]
then
	folder_name=anat

elif [ ${data_type} = FUNCTIONAL ]
then
	folder_name=func

elif [ ${data_type} = RESTING ]
then
	folder_name=rest

elif [ ${data_type} = DWI ]
then
	folder_name=DWI
fi
#####################################################################

######## Getting the files according to the image type ##############
# Processing for ANATOMICAL files
if [ ${data_type} = ANATOMICAL ]
then
	# Variable holding the path to the files
	path_files=${SUBJS_FOLDERS_PATH}/${SUBJ}/${folder_name}

	# Collecting into a variable the original ANATOMICAL files available for this subject
	files_processing_list=`ls ${path_files}/*_orig.nii.gz 2> /dev/null | sed 's!'${path_files}/'!!'`

	# Collecting into a variable ANATOMICAL files already reoriented. Notice the use of "*" wildcard after the "stdMNI" in order to get the anatomical files that were already skull-extracted (thus their name end in "stdMNI_brain.nii.gz"
	files_processing_list_reoriented=`ls ${path_files}/*_stdMNI*.nii.gz 2> /dev/null | sed 's!'${path_files}/'!!'`

# Processing for either FUNCTIONAL or RESTING files
elif [ ${data_type} = FUNCTIONAL ] || [ ${data_type} = RESTING ]
then
	# Variable holding the path to the files
	path_files=${SUBJS_FOLDERS_PATH}/${SUBJ}/${folder_name}

	for contrast in ${contrast_list}
	do
		# Colleting into a variable the original FUNCTIONAL runs
		FRUN=`ls ${path_files}/*${contrast}*/*_orig.nii.gz 2> /dev/null | sed 's!'${path_files}/'!!'`

		# Checking if there are already reoriented FUNCTIONAL files
		FRUN_reoriented=`ls ${path_files}/*${contrast}*/*_stdMNI.nii.gz 2> /dev/null | sed 's!'${path_files}/'!!'`

		# Collecting into a variable all FUNCTIONAL files available for this subject. Doing this into a temporary variable so as if there no files listed, this will remove the space added as a result of the loop that would make this variable be non-empty
		files_processing_list="${files_processing_list} ${FRUN}"

		# Collecting into a variable FUNCTIONAL files already reoriented.Doing this into a temporary variable so as if there no files listed, this will remove the space added as a result of the loop that would make this variable be non-empty
		files_processing_list_reoriented="${files_processing_list_reoriented} ${FRUN_reoriented}"
	done

# Processing for DIFFUSION files
elif [ ${data_type} = DWI ]
then
	# Variable holding the path to the files
	path_files=${SUBJS_FOLDERS_PATH}/${SUBJ}/${folder_name}

	# Collecting all DIFFUSION run (+fieldmaps) FOLDERS for each subject into variable "folders_processing_list"
	folders_processing_list=`ls -d1 ${path_files}/* 2> /dev/null | sed 's!'${path_files}/'!!'`

	for DWI_folder in ${folders_processing_list}
	do
		# Colleting into a variable FUNCTIONAL run
		DWI_file=`ls ${path_files}/${DWI_folder}/*_orig.nii.gz 2> /dev/null | sed 's!'${path_files}/'!!'`

		# Checking if there are already reoriented FUNCTIONAL files
		DWI_file_reoriented=`ls ${path_files}/${DWI_folder}/*_stdMNI.nii.gz 2> /dev/null | sed 's!'${path_files}/'!!'`

		# Collecting into a variable all FUNCTIONAL files available for this subject. Doing this into a temporary variable so as if there no files listed, this will remove the space added as a result of the loop that would make this variable be non-empty
		files_processing_list="${files_processing_list} ${DWI_file}"

		# Collecting into a variable FUNCTIONAL files already reoriented.Doing this into a temporary variable so as if there no files listed, this will remove the space added as a result of the loop that would make this variable be non-empty
		files_processing_list_reoriented="${files_processing_list_reoriented} ${DWI_file_reoriented}"
	done
fi
#####################################################################

#####################################################################
# Reorienting files pipeline - Common to all imaging modalities

# Checking if the variable "files_processing_list" has content
if [ X`echo ${files_processing_list} | tr -d ' '` != X ] # Notice the use of the command "tr" to remove spaces from the variable content
then
	# Loop to go through all files available for this image modality and this subject
	for file_processing_triage in ${files_processing_list}
	do
		# Checking for already re-oriented files
		if [ -n "${files_processing_list_reoriented}" ] # Checking if there are files already reoriented
		then # There are re-oriented files
			for reoriented_file in ${files_processing_list_reoriented} # Checking if the file being processed was already reoriented
			do
				# Getting the file names without the ".nii.gz" and "stdMNI"
				file_processing_triage_name_only=`echo ${file_processing_triage} | sed 's/.nii.gz//'`
				reoriented_file_name_only=`echo ${reoriented_file} | sed 's/_stdMNI.nii.gz//' | sed 's/.nii.gz//'` # Need the second "sed" command in case it is processing anatomicals and there are files with "_brain" in their names (after skull-extraction by BET)

				if [ ${file_processing_triage_name_only} = ${reoriented_file_name_only} ] # If these are equal, it means that this file was already re-oriented
				then
					# Assigning a variable to the already re-oriented file
					reoriented_file_display="$reoriented_file_display ${reoriented_file}"

					# Removing the files being tested from the respective variables, to avoid using the re-oriented file for processing
					files_processing_list=${files_processing_list/$file_processing_triage/} # Removes the file with original name
					files_processing_list=${files_processing_list/$reoriented_file/} # Removes the reoriented file
					files_processing_list_reoriented=${files_processing_list_reoriented/$reoriented_file/} # removes the re-oriented file

					# Getting out of the loop, as a match was found
					break
				fi
			done
		fi
	done

	# Checking if the variable "files_processing_list" has content
	if [ X`echo ${files_processing_list} | tr -d ' '` != X ] # Notice the use of the command "tr" to remove spaces from the variable content
	then
		# Here, the variable "files_processing_list" contains only the files that were not re-oriented yet (i.e., does not have "_stdMNI" in their file names)
		for file_processing in ${files_processing_list}
		do
			echo -e "\n"
			echo -en "\tChanging the image orientation for file \"${file_processing}\"..."

			# Removing the "_orig.nii.gz" from the middle of the filename
			file_processing02=`echo ${file_processing} | sed 's/_orig.nii.gz//'`

			#####################################
			# These commands will reorient the file to match the MNI template orientation
			fslreorient2std ${path_files}/${file_processing} ${path_files}/${file_processing02}_stdMNI

			##### Creating a LOG file with the commands used for later QA if needed #####
			echo "OS name and version: ${os_nameandversion}; Commands: fslreorient2std; FSL `cat $FSLDIR/etc/fslversion`; Date and time: `current_date_time 2`" > ${path_files}/LOGFILE_Reorient-original0image-to-MNI_fslreorient2std_${file_name}.txt

			echo -e "\nCommand fslreorient2std to reorient the original file to the MNI template orientation" >> ${folder_path}/LOGFILE_Non-brain-tissue-removal-fieldmap-mag_bet_${file_name}.txt

			echo -e "\nfslreorient2std ${path_files}/${file_processing} ${path_files}/${file_processing02}_stdMNI" >> ${folder_path}/LOGFILE_Non-brain-tissue-removal-fieldmap-mag_bet_${file_name}.txt
			#####################################

			echo
			echo -e "\tFinished changing the orientation for file \"${file_processing}\""
		done
	else
		echo -e "\n"
		echo -en "*** No files needing re-orientation were found for this subject *** "

		sleep 2
	fi

	# This will check if there are re-oriented files, and if so displays them to the user
	if [ X`echo ${reoriented_file_display} | tr -d ' '` != X ]
	then
		echo -e "\n"
		echo -e "These subject's files were already re-oriented:\n"

		# Making the items within the variable to be listed in a numbered list for the user
		# Establishing the initial item numbering
		count=1

		for item in ${reoriented_file_display}
		do
			# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
			counter=`printf "%02d" ${count}`

			echo "${counter}) ${item}"

			# Adding a unit to the numbering variable
			((count++))
		done

		# Cleaning the contents of the numbering variable
		unset count

		sleep 2
	fi

elif [ -z "${files_processing_list}" ] # Warning the user in case this variable is empty
then
	echo
	echo -e "*** WARNING *** There are no files for image type \"${data_type}\" listed for subject \"${SUBJ}\" ***"
	echo -e "*** Please check it before re-running this script ***\n"

	echo -en "Press any key to continue "
	read -n1 anykey
fi

# Cleaning the content of the variable below
unset files_processing_list files_processing_list_reoriented reoriented_file_display

#####################################################################
}

function reorient_neuro2radio {
# Listing all subjects with folders within the EXPERIMENT folder so the user can choose which subjects are going to have their files re-oriented
echo -e "\n"
echo -e "Choose from the below list the subjects that need their files to have orientation corrected\n"
echo -e "${SUBJLIST}\n"
echo

# Now asking for user input to which subjects are to have their files re-oriented
echo -en "Enter here the list of subjects (use space in between if more than one): "
read SUBJLIST
echo -e "\n\tDo you want:\t1) all files for all subjects to be processed or\n"
echo -en "\t\t\t2) you want to choose which ones? "
read frunproc

# Alerting the user to be sure that he wants to re-orient all files for the subjects listed
echo -e "\n\n"
echo -e "\t*** WARNING - this will change the orientation of all files (anatomical and functionals) for these subjects: ${SUBJLIST} ***\n"
echo -e "\tIf you are not sure if all the anatomical and functional files for these subjects need to be re-oriented, please press Control+C to exit and go back to the main menu\n"
echo -e "\tAlso notice that if you do re-orient the files the original ones will be renamed to \"filename_ORIG\" and moved to a folder called \"ORIG\" inside each file folder\n"
echo -e "\tThe newly oriented file will have the same name as the original, but will be located in the current folder\n"
echo -en "\tPress any key to continue "
read -n 1 anykey

if [ $frunproc = 1 ]
then
	# This will re-oriented all files within the subjects folder, including anatomicals and functionals
	for SUBJ in ${SUBJLIST}
	do
		echo
		echo "Processing the following subject: "${SUBJ}""
		# Calling function to reorient ANATOMICAL files
		anatomical_neuro2radio_reorient

		# Collecting all functional run files for each subject into variable "FRUNLIST"
		cd ${SUBJS_FOLDERS_PATH}/${SUBJ}/func > /dev/null
		FRUNLIST=`ls`

		# Calling function to reorient FUNCTIONAL files
		functional_neuro2radio_reorient

		echo -e "Done re-orienting all files for subject: ${SUBJ}\n"
	done
else
	# This will allow the user to choose the functional runs to reorient
	for SUBJ in ${SUBJLIST}
	do
		echo "Processing the following subject: "${SUBJ}""

		while [ 1 ]
		do
			echo
			echo -en "Do you need to re-orient the anatomical file? (y/n) "
			read anat_reorient

			# Processing user choice
			if [ ${anat_reorient} = y ]
			then
				anatomical_neuro2radio_reorient
				break
			else
				echo
				echo -e "Skipping ANATOMICAL file reorientation\n"
				break
			fi
		done

		echo
		echo -e "\tChecking which functional runs to be processed for subject \"${SUBJ}\"\n"
		FUNCRUNLIST=`ls -d1 ${SUBJS_FOLDERS_PATH}/${SUBJ}/func/f*|sed 's!'${SUBJS_FOLDERS_PATH}/${SUBJ}/func/'!!'`
		echo -e "\tFunctional runs for ${SUBJ}: \n\n\t`echo ${FUNCRUNLIST}`\n"

		# Create a "while" loop so if corrections are needed for the functional runs entered it can be done here
		while [ 1 ]
		do
			echo
			echo -en "Enter functional runs to be processed for ${SUBJ} (if more than one, separate with spaces): "
			read FRUNLIST
			echo -e "\nFunctional runs entered: ${FRUNLIST}"
			echo -en "\nIs this correct? (y/n) "
			read -n 1 conf

			# Check if the functional runs entered are correct
			if [ ${conf} = y ]
			then
				break
			else
				echo
				echo -e "Please correct functional runs entered"
				sleep 3
			fi
		done

		echo -e "\n"
		echo -e "Checking if folders for functional runs exist\n"
		cd /tmp
		cd ${SUBJS_FOLDERS_PATH}/${SUBJ}/func
		for frun in ${FRUNLIST}
		do
			foldercheck=${frun}
			checkfoldexist2
		done
		cd /tmp

		# Calling function to reorient FUNCTIONAL files
		functional_neuro2radio_reorient

		echo
		echo -e "Done re-orienting all files for ${SUBJ}\n"
	done
fi
}

function anatomical_neuro2radio_reorient {
##### Changing ANATOMICAL RUN orientation #####
echo -e "\n"
echo -e "\tRe-orienting files for \"${SUBJ}\"\n"

cd ${SUBJS_FOLDERS_PATH}/${SUBJ}/anat
ANATLIST=`ls *.nii.gz 2> /dev/null`

# This will check if there is an ORIG folder within the anat folder - an indication that image orientation change might have been done already

# Assigning a variable to hold the folder path
orig_anat="${SUBJS_FOLDERS_PATH}/${SUBJ}/anat/ORIG_anat"

if [ -d "${orig_anat}" ] && [ -n "${orig_anat}" ]
then
	echo
	echo -e "\tDirectory ${orig_anat} already exists\n"
	echo -e "\tPlease check if image reorientation for anatomical file was already performed before continuing\n"

	echo -en "\nPress any key to go back to the main menu "
	read -n 1 anykey
	exit
else
	for ANAT_file in ${ANATLIST}
	do
		echo -e "\n"
		echo -en "\tChanging the orientation for \"${ANAT_file}\"..."

		# These commands will swap the anatomical from NEUROLOGICAL to RADIOLOGICAL
		fslswapdim ${ANAT_file} -x y z ${ANAT_file}_RADIO_temp > /dev/null
		fslorient -swaporient ${ANAT_file}_RADIO_temp.nii.gz

		# removing the ".nii.gz" from the middle of the filename
		ANAT_file02=`echo ${ANAT_file}|sed 's/.nii.gz//'`

		# And this will make the anatomical labels to coincide to that if the MNI template
		fslswapdim ${ANAT_file}_RADIO_temp.nii.gz RL PA IS ${ANAT_file02}_RADIO
		rm ${ANAT_file}_RADIO_temp.nii.gz

		# Creating a folder to hold the original anatomical file and moving it
		mkdir ${SUBJS_FOLDERS_PATH}/${SUBJ}/anat/ORIG_anat

		# Renaming the original file to have a ORIG at the end
		mv ${ANAT_file} ${ANAT_file02}_ORIG.nii.gz

		# Moving the original file to the created folder
		mv ${ANAT_file02}_ORIG.nii.gz ${SUBJS_FOLDERS_PATH}/${SUBJ}/anat/ORIG_anat/

		# Renaming the re-oriented file
		mv ${ANAT_file02}_RADIO.nii.gz ${ANAT_file}

		echo
		echo -e "\tFinished changing the orientation for \"${ANAT_file}\""
	done
fi

echo -e "\n"
echo -e "Changed orientation for ANATOMICAL files"
}

function functional_neuro2radio_reorient {
##### Changing FUNCTIONAL RUNS orientation #####
cd ${SUBJS_FOLDERS_PATH}/${SUBJ}/func

for func_folder in ${FRUNLIST}
do
	cd ${func_folder} > /dev/null
	FRUN=`echo *.nii.gz`

	# This will check if there is an ORIG folder within each functional folder - an indication that image orientation change might have been done already

	# Assigning a variable to hold the folder path
	orig_func="${SUBJS_FOLDERS_PATH}/${SUBJ}/func/${func_folder}/ORIG_func"

	if [ -d "${orig_func}" ] && [ -n "${orig_func}" ]
	then
		echo
		echo -e "\tDirectory ${orig_func} already exists\n"
		echo -e "\tPlease check if image reorientation for this functional file was already performed before continuing\n"
		echo -e "\tImage reorientation for file \"${FRUN}\" was NOT done\n"
		func_notreorient="${func_notreorient} ${FRUN}"
		cd ..

		sleep 5
	else

		echo -en "\tChanging the orientation for \"${FRUN}\" "

		# These commands will swap the functional from NEUROLOGICAL to RADIOLOGICAL
		fslswapdim ${FRUN} -x y z ${FRUN}_RADIO_temp > /dev/null
		fslorient -swaporient ${FRUN}_RADIO_temp.nii.gz

		# removing the ".nii.gz" from the middle of the filename
		FRUN02=`echo ${FRUN} | sed 's/.nii.gz//'`

		# And this will make the anatomical labels to coincide to that of the MNI template
		fslswapdim ${FRUN}_RADIO_temp.nii.gz RL PA IS ${FRUN02}_RADIO
		rm ${FRUN}_RADIO_temp.nii.gz

		# Creating a folder to hold the original functional file
		mkdir ${SUBJS_FOLDERS_PATH}/${SUBJ}/func/${func_folder}/ORIG_func

		# Renaming the original file to have a ORIG at the end
		mv ${FRUN} ${FRUN02}_ORIG.nii.gz

		# Moving the original file to the created folder
		mv ${FRUN02}_ORIG.nii.gz ${SUBJS_FOLDERS_PATH}/${SUBJ}/func/${func_folder}/ORIG_func/

		# Renaming the re-oriented file
		mv ${FRUN02}_RADIO.nii.gz ${FRUN}

		echo
		echo -e "Done changing the orientation for \"${FRUN}\"\n"
		cd ..
	fi
done

# This will show, if any, the functional images that were not reoriented
if [ -n "${func_notreorient}" ]
then
	echo
	echo -e "These functional images were NOT reoriented during this processing, since they already had an \"ORIG_func\" folder:\n ${func_notreorient}\n"
	echo -e "\tPlease check if image reorientation is needed for them, as they may or may not be already reoriented\n"
	echo -en "\tPress any key to continue "
	read -n 1 anykey
else
	echo
fi
}

function check_orientation {
# This function checks the orientation of the images (NEUROLOGICAL or RADIOLOGICAL)

echo -e "\n"
echo -e "This will check the orientation of the anatomical and functional images for all subjects"
echo -e "This information will be saved in a text file within each subjects folder\n"

for SUBJ in ${SUBJLIST}
do
	echo -e "\n"
	echo -e "\tThis file was generated on `current_date_time 2`\n" > ${SUBJS_FOLDERS_PATH}/${SUBJ}/${SUBJ}_images_orientation.txt

	# Checking orientation of anatomicals
	echo -e "\tChecking orientation of anatomical file(s) for ${SUBJ}\n" | tee -a ${SUBJS_FOLDERS_PATH}/${SUBJ}/${SUBJ}_images_orientation.txt

	cd ${SUBJS_FOLDERS_PATH}/${SUBJ}/anat
	ANATLIST=`ls *.nii.gz`

	for ANATFILE in ${ANATLIST}
	do
		echo -e "Anatomical file ${ANATFILE} is oriented `fslorient ${ANATFILE}`\n" | tee -a ${SUBJS_FOLDERS_PATH}/${SUBJ}/${SUBJ}_images_orientation.txt
	done

	# Checking orientation of functional runs
	echo | tee -a ${SUBJS_FOLDERS_PATH}/${SUBJ}/${SUBJ}_images_orientation.txt
	echo -e "\tChecking orientation of functional runs for ${SUBJ}\n" | tee -a ${SUBJS_FOLDERS_PATH}/${SUBJ}/${SUBJ}_images_orientation.txt

	cd ${SUBJS_FOLDERS_PATH}/${SUBJ}/func > /dev/null
	FRUNLIST=`ls -d frun*`

	for func_folder in ${FRUNLIST}
	do
		cd ${func_folder} > /dev/null
		FRUN=`echo *.nii.gz`

		echo -e "Functional run ${FRUN} is oriented `fslorient ${FRUN}`\n" | tee -a ${SUBJS_FOLDERS_PATH}/${SUBJ}/${SUBJ}_images_orientation.txt
		cd ..
	done

	echo -en "\nPress any key to continue "
	read -n 1 anykey
done
}

###########################################################################
###############			MAIN MENU ROUTINE			###############
###########################################################################

clear

echo -e "\tThis program will check the orientation of the anatomical and functional files for the following subjects:\n"

# Making the subjects within the "SUBJLIST" variable to be listed in a numbered list for the user
# Establishing the initial subject numbering
count=1

for subj in ${SUBJLIST}
do
	# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
	counter=`printf "%02d" ${count}`

	echo "${counter}) ${subj}"

	# Adding a unit to the numbering variable
	((count++))
done

# Cleaning the contents of the numbering variable
unset count

echo
echo -e "\tIf desired, you may re-orient images to match the standard templates (MNI) with this program, that uses the \"fslreorient2std\" tool present in FSL 4.1.6 & greater - *** RECOMMENDED ***\n"

echo -e "\tYou may also change orientation of images that are stored in NEUROLOGICAL convention to RADIOLOGICAL *** although usually not needed ***"
echo -e "\tIn this case, it will use the \"fslorient\" command that is part of the FSL package\n"

echo -e "\tYou can consult images orientation information by checking the file that will be created inside each subject folder: \"SUBJ_images_orientation.txt\"\n"

echo -en "\tPress any key to continue "
read -n 1 anykey

while [ 1 ]
do
	# Checking if re-orientation is needed
	echo -e "\n"
	echo -e "Please choose one of the options below:"
	echo -e "\t1. Change orientation of images to match the MNI template *** RECOMMENDED ***\n"

	echo -e "\t2. Check the orientation (NEUROLOGICAL or RADIOLOGICAL) of the subjects' images"
	echo -e "\t3. Change orientation from NEUROLOGICAL to RADIOLOGICAL *** NOT usually needed ***"
	echo -e "\t0. Go back to PROCESSING menu\n"

	echo -en "\tEnter your option here: "
	read reorient


	case ${reorient} in
	1)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "swaporient:Change images orientation to MNI template" FSL "(reorient_2std) fslreorient2std"

		# Calling the function "files_types_to_process" to select whhat file types to be processed
		files_types_to_process

		echo
		echo -e "Done re-orienting to the MNI template for all files for these subjects:\n"

		for item in ${SUBJLIST}
		do
			echo $item
		done

		# Ask for user input to continue to the main menu
		echo
		echo -en "\nPress any key to go back to the main menu "
		read -n1 continue

		break ;;
	2)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "swaporient:Check images orientation" FSL "(check_orientation) fslorient"

		check_orientation
		echo
		echo -e "Done checking the orientation of these subjects' images:\n"

		for item in ${SUBJLIST}
		do
			echo $item
		done

		# Ask for user input to continue to the main menu
		echo
		echo -en "\nPress any key to go back to the main menu "
		read -n1 continue

		break ;;
	3)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "swaporient:Change images orientation" FSL "(reorient_neuro2radio) fslswapdim, fslorient"

		reorient_neuro2radio
		echo
		echo -e "Done re-orienting all files for these subjects: ${SUBJLIST}\n"
		echo -e "If desired, re-check the image files orientation by re-runing this program in the PROCESSING MENU to make sure that the conversion worked\n"
		echo -e "This will also update the text file describing the orientation of all image files for each subject\n"

		# Ask for user input to continue to the main menu
		echo -en "\nPress any key to go back to the main menu "
		read -n1 continue

		break ;;
	0)
		echo -e "\n\n"
		echo -en "\tGoing back to the PROCESSING menu "
		sleep 2

		break ;;
	*)
		echo
		echo -e "No valid option chosen"
		echo -en "Please enter a valid option "

		sleep 2
		;;
	esac
done

# Creating a log file. STEP 2 of 2 = finish call
# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 1 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. List of subjects processed
log_file_scripts_used finish "${SUBJLIST}"
