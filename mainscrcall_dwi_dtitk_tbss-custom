#! /bin/bash

# This script will do a custom implementation of the TBSS step "tbss_3_postreg" on the registered and spatial normalized DTI data done by DTI-TK #

# Sourcing of functions library files #
. mainscrcall_funclib

# Setting Ctrl + C as key combination to go back to PROCESSING menu. Also signals to the log file (=if there is one) that this script was interrupted
trap "echo -en '\n\nGoing back to the PROCESSING menu '; sleep 2; log_file_scripts_used interrupt; exit" SIGINT

# Checking if variables are not empty
emptvar=${MEDIA}
var_checked="THE MAIN FOLDER HOLDING MRI DATA"
checkemptvar

emptvar=${EXPERIMENT}
var_checked="THE EXPERIMENT NAME"
checkemptvar

emptvar="${SUBJLIST}"
var_checked="THE SUBJECT(S) TO BE PROCESSED"
checkemptvar

emptvar="${SUBJS_FOLDERS_PATH}"
var_checked="THE FOLDER CONTAINING ALL SUBJECTS' FOLDERS"
checkemptvar

##########			FUNCTIONS USED IN THIS SCRIPT			##########
function dtitk_mainfolder {
# This function will check the path to the dtitk main folder as well as the existence of a text file holding the the subjects files list to be processed

# It uses 1 parameter:
	# 1. Flag if it is being called for preprocessing or for copying files

# The "local" before the variable ensure that the variable is limited only to within this function
local subjs_file="$1"

# Asking the user to confirm or enter a new folder name for the folder holding the dtifit output files for each subject
while [ 1 ]
do
	echo
	echo -e "The folder name holding the dtitk pre-processed files is currently entered as: ${dwi_dtitk_foldername}"
	
	# Asking for the user's input
	echo
	echo -en "Do you want to: (1) Keep the name as is; or (2) enter a new name: "
	read dtifit_foldername

	# Checking user's answer and asking for confirmation
	if [ ${dtifit_foldername} = 1 ]
	then
		echo -en "Keeping the dtifit output files folder name as: \"${dwi_dtitk_foldername}\" "
	
		sleep 2

		break

	elif [ ${dtifit_foldername} = 2 ]
	then
		echo
		# Checking which option is calling this function
		echo -en "Please enter a new folder name: "
		read dwi_dtitk_foldername

		# Giving feedback to the user
		echo
		echo -en "dtifit pre-processed files folder name entered as: \"${dwi_dtitk_foldername}\" "
		
		sleep 2

		echo
		break
	fi
done

# Loop to check if the dtitk main folder exists in the provided path
while [ 1 ]
do
	# Checking if the above folder exists for the subject being processed
	if [ -d ${dwi_mainfolder_path}/${dwi_dtitk_foldername} ]
	then
		# Giving feedback to the user
		echo -e "\n"
		echo -en "Main DTI-TK folder exists "
		
		# Storing the full path for the "subjs.txt" file that lists all filesto be processed into a variable
		# Checking which file will be used according to the calling script
		if [ ${subjs_file} = subjs ]
		then
			dtitk_subjsfileslist=`ls ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/subjs.txt 2> /dev/null`
		elif [ ${subjs_file} = subjs_normalized ]
		then
			dtitk_subjsfileslist=`ls ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/subjs_normalized.txt 2> /dev/null`
		fi
		
		break
	else
		# Warning the user that the folder does not exists
		echo
		echo -en "\n*** This folder does not exists within this path: ${dwi_mainfolder_path} *** "
		
		sleep 2
		
		echo
		echo -e "You will need to enter below the proper dtitk main folder name holding the subject's pre-processed DTI files"

		echo
		echo -en "Please enter a new folder name: "
		read dwi_dtitk_foldername
	fi
done
}

function dtitk_meanFA {
# This function will generate spatially normalized DTI data for each subject, population-specific DTI template with isotropic 1 mm^3 resolution, and the \"mean_FA\" file

# Checking if the "subjs.txt" file exists
if [ -z "${dtitk_subjsfileslist}" ] # Checking if this variable is zero in length
then
	dtitk_subjsfileslist=none
else
	# Giving feedback to the user
	echo -e "\n"
	echo -en "\"subjs.txt\" file exists "
	
	sleep 2
fi

# Assigning the final population-specific DTI template file computed through deformable aligment step into a variable
mean_final_template_file=`ls ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/mean_diffeomorphic_initial6.nii.gz`

# This will see if the "subjs.txt" files is missing
if [ "${dtitk_subjsfileslist}" != none ] # If this variable is equal to "none", it means that it is empty
then
	#####################################
	
	# Steps to be ran: 1. Generate the spatially normalized DTI data with the isotropic 1mm^3 resolution; 2.Creating the "subjs_normalized.txt" file needed to generate the population-specific DTI template; 3. Generate the population-specific DTI template with the isotropic 1mm3 spacing; 4. Generate the FA map of the high-resolution population-specific DTI template; 5. Rename the FA map to be consistent with the TBSS pipeline

	# Putting the full command into a variable
	command_processing=`echo "cd ${dwi_mainfolder_path}/${dwi_dtitk_foldername}; dti_warp_to_template_group ${dtitk_subjsfileslist} ${mean_final_template_file} 1 1 1 &> LOGFILE_TBSS_step1_spatial-normalization_OUTPUT.txt; ls -1 ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/*_dtitk_diffeo.nii.gz > subjs_normalized.txt; TVMean -in subjs_normalized.txt -out mean_final_high_res.nii.gz &> LOGFILE_TBSS_step2_study-specific-template_OUTPUT.txt; TVtool -in mean_final_high_res.nii.gz -fa &> LOGFILE_TBSS_step3_high-res-templateFA-map_OUTPUT.txt; mv mean_final_high_res_fa.nii.gz mean_FA.nii.gz"`

	# Adding the command to the ppss processing text file
	echo "${command_processing}" >> ${temp_folder}/${ppss_command_file}

	##### Creating a LOG file with the commands used for later QA if needed #####
	echo "OS name and version: ${os_nameandversion}; Commands: dti_warp_to_template_group, TVMean, TVtool; DTI-TK version: `echo ${DTITK_ROOT} | awk -F/ '{print $NF}'`; Date and time: `current_date_time 2`" > ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_steps1-3_study-specific-template_meanFA_COMMANDS-USED.txt

	echo -e "\nCommand \"dti_warp_to_template_group\" to generate the spatially normalized DTI data with the isotropic 1mm^3 resolution for each subject\nCommand \"ls\" to create the \"subjs_normalized.txt\" file needed to generate the population-specific DTI template\nCommand \"TVMean\" to generate the population-specific DTI template with the isotropic 1mm3 spacing\nCommand \"TVtool\" to generate the FA map of the high-resolution population-specific DTI template\nCommand \"mv\" to rename the FA map to be consistent with the TBSS pipeline" >> ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_steps1-3_study-specific-template_meanFA_COMMANDS-USED.txt

	echo -e "\n${command_processing}" >> ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_steps1-3_study-specific-template_meanFA_COMMANDS-USED.txt
	#####################################
else
	echo -e "\n"
	echo -e "##### The \"subjs.txt\" file needed for \"dti_warp_to_template_group\" was not found #####"
	echo -e "No processing was done. Please check the path entered to that file"
fi
}

function dtitk_meanFAskeleton {
# This function will proceed Generate the white matter skeleton from high-res FA map of DTI tenmplate - mean_FA_skeleton

# Checking if the file "mean_initial.nii.gz" is present in the dtitk main folder (created by bootstrapping of initial DTI volumes)
# Creating a variable to hold the full path to the "mean_FA" file
meanFA_fullpath=${dwi_mainfolder_path}/${dwi_dtitk_foldername}/mean_FA.nii.gz

# Asking user's input about the threshold to be used to create the mask from the high-res population-specific DTI template
echo
echo -e "You need to enter a threshold to be used to create the mask from the high-res population-specific DTI template"
echo -e "A threshold ~ 0.3 is usually ok, BUT you must check the population-specific DTI template \"mean_final_high_res.nii.gz\" to be sure"

echo
echo -en "Please enter the threshold to be used: "
read threshold_mask

# Checking if the "mean_FA" file exists, and if the variable "threshold_mask" has content
if [ -f ${meanFA_fullpath} ] && [ -n "${threshold_mask}" ]
then
	# Giving feedback to the user
	echo -e "\n"
	echo -en "High-resolution FA map of DTI template named \"mean_FA.nii.gz\" exists. Continuing processing..."
	
	sleep 2

	#####################################
	# Steps to be ran: 1. Generate the white matter skeleton from the high-resolution FA map of the DTI template; 2. Create the trace image from the high-resolution population-specific DTI template 3. Use the trace image to create a mask and apply it to the mean_FA_skeleton image (fslmaths options used: a. binarizing the mask using the user entered threshold (option "-thr"), b. erosion of 1 voxel in the edge of the mask (option "-kernel boxv 3x3x1"), c. filling internal holes (option "-fillh"); 4. Masking the mean_FA_skeleton image"
	# Putting the full command into a variable
	command_processing=`echo "cd ${dwi_mainfolder_path}/${dwi_dtitk_foldername}; tbss_skeleton -i mean_FA -o mean_FA_skeleton_non-masked; TVtool -in mean_final_high_res.nii.gz -tr > /dev/null; fslmaths mean_final_high_res_tr.nii.gz -thr ${threshold_mask} -bin -kernel boxv 3x3x1 -ero -fillh mean_final_high_res_tr_mask; fslmaths mean_FA_skeleton_non-masked.nii.gz -mas mean_final_high_res_tr_mask mean_FA_skeleton"`

	# Adding the command to the ppss processing text file
	echo "${command_processing}" >> ${temp_folder}/${ppss_command_file}
	
	##### Creating a LOG file with the commands used for later QA if needed #####
	echo "OS name and version: ${os_nameandversion}; Command: tbss_skeleton fslmaths; FSL version: `cat $FSLDIR/etc/fslversion`; Date and time: `current_date_time 2`" > ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_step4_meanFAskeleton_COMMANDS-USED.txt

	echo -e "\nCommands \"tbss_skeleton\", \"TVtool\" and \"fslmaths\" to perform the following steps:\n1. Generate the white matter skeleton from the high-resolution FA map of the DTI template (tbss_skeleton)\n2. Create the trace image from the high-resolution population-specific DTI template (TVtool)\n3. Use the trace image to create a mask and apply it to the mean_FA_skeleton image (fslmaths options used: a. binarizing the mask using the user entered threshold (option \"-thr\"), b. erosion of 1 voxel in the edge of the mask (option \"-kernel boxv 3x3x1\"), c. filling internal holes (option \"-fillh\")\n4. Masking the mean_FA_skeleton image to generate the white matter skeleton from high-res FA map of DTI tenmplate - \"mean_FA_skeleton\". (fslmaths)" >> ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_step4_meanFAskeleton_COMMANDS-USED.txt

	echo -e "\n${command_processing}" >> ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_step4_meanFAskeleton_COMMANDS-USED.txt
	#####################################
else
	# Giving feedback to the user
	echo
	echo -e "Did not find a high-resolution FA map of DTI template named \"mean_FA.nii.gz\" in this path: \"${dwi_mainfolder_path}/${dwi_dtitk_foldername}\". This file is required for processing; OR no threshold for mask creation was entered. Please check "
	
	sleep 2
fi
}

function dtitk_generateFAmap {
# This function will generate FA map of spatially-normalized high-res DTI data "all_FA", and create a combined binary mask "mean_FA_mask"

# Checking if the "subjs_normalized.txt" file exists
if [ -z "${dtitk_subjsfileslist}" ] # Checking if this variable is zero in length
then
	dtitk_subjsfileslist=none
else
	# Giving feedback to the user
	echo -e "\n"
	echo -en "\"subjs_normalized.txt\" file exists "
	
	sleep 2
fi


# This will see if the "subjs_normalized.txt" file is missing
if [ "${dtitk_subjsfileslist}" != none ] # If this variable is equal to "none", it means that it is empty
then
	#####################################
	
	# Going to the dtitk main folder folder
	cd ${dwi_mainfolder_path}/${dwi_dtitk_foldername}

	# Loop to generate the FA map for each subject's high-res DTI data
	for subj_img in `cat ${dtitk_subjsfileslist}`
	do
		# Putting the full command into a variable
		command_processing=`echo "TVtool -in ${subj_img} -fa > /dev/null"`
		
		# Adding the command to the ppss processing text file
		echo "${command_processing}" >> ${temp_folder}/${ppss_command_file}
	done


	##### Creating a LOG file with the commands used for later QA if needed #####
	echo "OS name and version: ${os_nameandversion}; Command: TVtool; DTI-TK version: `echo ${DTITK_ROOT} | awk -F/ '{print $NF}'`; Date and time: `current_date_time 2`" > ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_step5_subject-high-res-FAmap_COMMAND-USED.txt

	echo -e "Command \"TVtool\" to generate subject high-res FA map." >> ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_step5_subject-high-res-FAmap_COMMAND-USED.txt

	echo -e "\nShowing command for last subject processed\n${command_processing}" >> ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_step5_subject-high-res-FAmap_COMMAND-USED.txt
	#####################################
else
	echo -e "\n"
	echo -e "##### The \"subjs_normalized.txt\" file needed for \"TVtool\" was not found #####"
	echo -e "No processing was done. Please check the path entered to that file"
fi
}

###########################################################################
###############			MAIN MENU ROUTINE			###############
###########################################################################

##### 			VARIABLES TO BE USED IN THIS SCRIPT 		#####
# Assigning a variable to hold the main location of the files generated by this script
temp_folder=/tmp/ppss_tempdir_dtitk_tbss-custom # Where the temporary files will be held
ppss_command_file=dtitk_files_list_tbss-custom.txt

dwi_mainfolder_path=${FULLPATH} # Where the DWI files are. Can be modified by the user in this script.
dwi_dtitk_foldername=dtitk_mainfolder # The folder name where the output files of dtifit are located (this may be changed later by the user)
######################################################################

######### Script Main menu - Informing the user what this script does and asking for input #########
clear

# Changing directory to /tmp in case the script commits some error - this will make any commands to be run within /tmp, preventing damage to the file system
cd /tmp

# Removing temporary folders and files created, just in case they were not deleted properly by a previously ran script
rm -r ${temp_folder} 2> /dev/null

# Creating a temporary folder to hold the text file with the subjects to be processed
mkdir ${temp_folder} 2> /dev/null

echo -e "This program will do a custom implementation of TBSS step \"tbss_3_postreg\", and will create the needed files for posterior steps of TBSS:\n1. mean_FA\n2. mean_FA_skeleton\n3. all_FA\n4. mean_FA_mask"

echo
echo -e "It will use several tools from DTI-TK toolkit\n"

echo -e "#######################################################"
echo -e "*** IMPORTANT - this program makes one assumption:"
echo -e "1. You have pre-processed, registered and spatially normalized your files with DTI-TK, and they are saved in a single folder along with a text file listing the subjects to be processed."
echo -e "#######################################################"

##### GATHERING THE PATH TO THE ANALYSIS FOLDER #####
# FUNCTION CALL: calls the function "analysis_mainfolder" in "mainscrcall_funclib" to allow the user to select the path to the subject's folders
analysis_mainfolder DWI

# Assigning the output variable from the function above to a local variable
dwi_mainfolder_path=${ANALYSIS_MAINFOLDER_PATH}
######################################################

# MAIN MENU
echo
echo -e "Please choose which step to proceed:"
echo -e "\t1. Generate spatially normalized DTI data for each subject, population-specific DTI template with isotropic 1 mm^3 resolution, and the \"mean_FA\" file"
echo -e "\t2. Generate the white matter skeleton from high-res FA map of DTI tenmplate - \"mean_FA_skeleton\""
echo -e "\t3. Generate FA map of spatially-normalized high-res DTI data \"all_FA\", and create a combined binary mask \"mean_FA_mask\""
echo -e "\t0. Back to main menu\n"

echo -en "Please enter your option: "
read dwifit_process_steps

# Ask for user input to continue
while [ 1 ]
do
	case ${dwifit_process_steps} in
	0)
		echo
		echo -en "Going back to the PROCESSING menu "

		sleep 2

		exit
		;;
	1)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "mainscrcall_funclib" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer, DTI-TK) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "mainscrall_dwi_dtitk_tbss-custom:Generate spatially normalized DTI data for each subject, population-specific DTI template with isotropic 1 mm^3 resolution, and the \"mean_FA\" file" DTI-TK "(dtitk_bootstraptemplate) dti_warp_to_template_group TVMean TVtool"

		# Giving information to the user on what this script will do
		echo
		echo -e "This script will generate spatially normalized DTI data for each subject, population-specific DTI template with isotropic 1 mm^3 resolution, and the \"mean_FA\" file"

		# Warning the user about the script assumptions
		echo
		echo -e "*** Please note that this script expects the pre-processed, registered and spatially normalized DTI-TK DTI volumes in a single folder for each subject, as well as a text file named \"subjs.txt\" with the files to be processed ***"
		echo -e "If not it will generate an error"
		echo -en "Press any key to continue "
		read anykey

		# FUNCTION CALL: Calls the function "dtitk_mainfolder" to confirm dtitk main folder
		dtitk_mainfolder subjs

		# FUNCTION CALL: Calls the function "dtitk_meanFA" to generate spatially normalized DTI data for each subject, population-specific DTI template with isotropic 1 mm^3 resolution, and the \"mean_FA\" file
		dtitk_meanFA

		# Checking if there is a PPSS processing file
		if [ -f "${temp_folder}/${ppss_command_file}" ] # Checking if this file exists and is a file
		then
			# Calling the function "parallel_processing_ppss" to run the motion outliers command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
			# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
			parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

			echo -e "\n"
			echo -e "Finished processing at: `current_date_time 2`"
		else
			echo
			echo -en "*** No PPSS processing file was generated - please check the reason ***"
			echo -en "Press any key to continue "
			read -n1 anykey
		fi

		# Warning the user to visually inspect the template generated before proceeding
		echo
		echo -e "*** Please do a visual check of the population-specific DTI template named \"mean_final_high_res.nii.gz\" and the \"mean_FA.nii.gz\" file created for quality control before proceeding ***"
		
		# Ask for user input to continue
		echo
		echo -en "Press any key to continue to the PROCESSING menu "
		read -n1 anykey

		break
		;;
	2)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "mainscrcall_funclib" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer, DTI-TK) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "mainscrall_dwi_dtitk_tbss-custom:Generate the white matter skeleton from high-res FA map of DTI tenmplate - mean_FA_skeleton" FSL "(dtitk_meanFAskeleton) tbss_skeleton fslmaths"

		# Giving information to the user on what this script will do
		echo
		echo -e "This script will generate the white matter skeleton from high-res FA map of DTI template - \"mean_FA_skeleton\""

		# Warning the user about the script assumptions
		echo
		echo -e "*** Please note that this script expects the pre-processed DTI-TK DTI volumes in a single folder for each subject, as well as a text file named \"subjs.txt\" with the files to be processed ***"
		echo -e "If not it will generate an error"
		echo -en "Press any key to continue "
		read anykey

		# FUNCTION CALL: Calls the function "dtitk_mainfolder" to confirm dtitk main folder
		dtitk_mainfolder none
		
		# FUNCTION CALL: Calls the function "dtitk_meanFAskeleton" to proceed with generate the white matter skeleton from high-res FA map of DTI tenmplate - mean_FA_skeleton
		dtitk_meanFAskeleton

		# Checking if there is a PPSS processing file
		if [ -f "${temp_folder}/${ppss_command_file}" ] # Checking if this file exists and is a file
		then
			# Calling the function "parallel_processing_ppss" to run the motion outliers command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
			# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
			parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

			echo -e "\n"
			echo -e "Finished processing at: `current_date_time 2`"
			
			# Asking the user to check the mask created before proceeding
			echo -e "\n"
			echo -e "*** Please check FA skeleton generated for quality control, also observe if masking removed any \"ring\" around the brain's edge ***"
			echo -e "Full path to the FA skeleton file: ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/mean_FA_skeleton.nii.gz"
			echo -e "If needed, compare the above file with the non-masked version: ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/mean_FA_skeleton_non-masked.nii.gz"
		else
			echo
			echo -en "*** No PPSS processing file was generated - please check the reason ***"
			echo -en "Press any key to continue "
			read -n1 anykey
		fi
		
		# Ask for user input to continue
		echo
		echo -en "Press any key to continue to the PROCESSING menu "
		read -n1 anykey

		break
		;;
	3)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "mainscrcall_funclib" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer, DTI-TK) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "mainscrall_dwi_dtitk_tbss-custom:Generate FA map of spatially-normalized high-res DTI data \"all_FA\", and create a combined binary mask \"mean_FA_mask\"" DTI-TK FSL "(dtitk_generateFAmap) TVtool fslmerge fslmaths"

		# Giving information to the user on what this script will do
		echo
		echo -e "This script will generate FA map of spatially-normalized high-res DTI data \"all_FA\", and create a combined binary mask \"mean_FA_mask\""

		# Warning the user about the script assumptions
		echo
		echo -e "*** Please note that this script expects the affine aligned DTI-TK DTI volumes in a single folder for each subject, as well as a text file named \"subjs.txt\" with the files to be processed ***"
		echo -e "If not it will generate an error"
		echo -en "Press any key to continue "
		read anykey

		# FUNCTION CALL: Calls the function "dtitk_mainfolder" to confirm dtitk main folder
		dtitk_mainfolder subjs_normalized
		
		# FUNCTION CALL: Calls the function "dtitk_generateFAmap" to proceed with step 1. Generate FA map of spatially-normalized high-res DTI data "all_FA", and create a combined binary mask "mean_FA_mask"
		dtitk_generateFAmap
		
		# Checking if there is a PPSS processing file
		if [ -f "${temp_folder}/${ppss_command_file}" ] # Checking if this file exists and is a file
		then
			# Calling the function "parallel_processing_ppss" to run the motion outliers command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
			# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
			parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

			echo -e "\n"
			echo -e "Finished processing at: `current_date_time 2`"
		else
			echo
			echo -en "*** No PPSS processing file was generated - please check the reason ***"
			echo -en "Press any key to continue "
			read -n1 anykey
		fi

		#######################################
		##### Steps 2 and 3 of processing #####
		#######################################

		# Giving feedback to the user
		echo -e "\n"
		echo -en "Combining all subjects' high-res FA maps into a single 4d file named \"all_FA\", followed by creating a combined binary mask \"mean_FA_mask\" "
		
		# Entering the dtitk main folder
		cd ${dwi_mainfolder_path}/${dwi_dtitk_foldername}
		
		# Step 2. Combining all subjects' high-res FA maps into a single 4d file named "all_FA"
		fslmerge -t all_FA `ls *_fa.nii.gz`
		
		# Step 3. Creating a combined binary mask volume from "all FA"
		fslmaths all_FA -max 0 -Tmin -bin mean_FA_mask -odt char
		
		# Adding the above steps into the LOG file
		echo -e "\nCommands used to combine all subjects' high-res FA maps into a single 4d file named \"all_FA\", followed by creating a combined binary mask \"mean_FA_mask\"." >> ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_step5_subject-high-res-FAmap_COMMAND-USED.txt

		echo -e "\n1. fslmerge -t all_FA ls *_fa.nii.gz\n2. fslmaths all_FA -max 0 -Tmin -bin mean_FA_mask -odt char" >> ${dwi_mainfolder_path}/${dwi_dtitk_foldername}/LOGFILE_TBSS_step5_subject-high-res-FAmap_COMMAND-USED.txt
		
		# Giving feedback to the user
		echo -e "\n"
		echo -e "Finished processing"
		
		
		# Ask for user input to continue
		echo
		echo -en "Press any key to continue to the PROCESSING menu "
		read -n1 anykey

		break
		;;
	*)
		echo -e "No valid option chosen"
		echo -en "Please re-enter an option "

		sleep 2
		;;
	esac
done

# Creating a log file. STEP 2 of 2 = finish call
# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 1 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. List of subjects processed
log_file_scripts_used finish "${SUBJLIST}"

# Removing temporary folders and files created
rm -r ${temp_folder} 2> /dev/null