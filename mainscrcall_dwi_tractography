#! /bin/bash

# Script to do bedpostx: It creates all the files necessary for running probabilistic tractography

# Sourcing of functions library files #
. mainscrcall_funclib

# Setting Ctrl + C as key combination to go back to PROCESSING menu. Also signals to the log file (=if there is one) that this script was interrupted
trap "echo -en '\n\nGoing back to the PROCESSING menu '; sleep 2; log_file_scripts_used interrupt; exit" SIGINT

# Checking if variables are not empty
emptvar=${MEDIA}
var_checked="THE MAIN FOLDER HOLDING MRI DATA"
checkemptvar

emptvar=${EXPERIMENT}
var_checked="THE EXPERIMENT NAME"
checkemptvar

emptvar="${SUBJLIST}"
var_checked="THE SUBJECT(S) TO BE PROCESSED"
checkemptvar

emptvar="${SUBJS_FOLDERS_PATH}"
var_checked="THE FOLDER CONTAINING ALL SUBJECTS' FOLDERS"
checkemptvar

##########			FUNCTIONS USED IN THIS SCRIPT			##########
function seed_mask_choice {
# This function allow the user to choose the atlas(es) to be used

# LOOP TO GATHER THE SEED PATH (single mask or multiple masks only)
# Checking the type of seed to be used for tractography
# Asking the user the path for seed mask to be used
echo
echo -e "Here you will be able to choose the *** SEED masks *** to be used for tractography"
echo -e "*** Remember to use similar types of masks only, i.e., spheres, full ROI as they will have significantly different running times ***"
echo -en "Please enter the full path to the folder holding the mask(s) to be used: "
read seed_mask_fullpath_user

# Outputing the masks in a numbered list, displayin only the mask file name (not the full path)
echo
echo -e "These are the mask files present in the above folder, if any:\n`ls ${seed_mask_fullpath_user}/*.nii.gz | awk -F/ '{print $NF}' | sed "=" | sed 'N; s/\n/) /'`"

while [ 1 ]
do
	echo
	echo -en "\tPlease enter here the number corresponding to the mask(s) to be used (if more than one, separate with space): "
	read seed_mask_list_temp

	if [ -n "${seed_mask_list_temp}" ] # Checking if this variable is non-zero in length
	then
		# Collecting the atlases available into a variable to be used in the function "numbered_list" (functionslibr_FSL)
		var1_available=`ls ${seed_mask_fullpath_user}/*.nii.gz | sed "=" | sed 'N; s/\n/=/'` # variable with all the files in a numbered list. Note that, since the output of "Atlasquery" has spaces, another sed command is used to transform them into underscore
		var2_list="${seed_mask_list_temp}" # The numbers chosen by the user corresponding to the files to be used

		# Calling the function "numbered_list_display" to present the atlases available in a numbered list to the user. Note the parameters to be passed on to the function
		numbered_list_display "${var1_available}" "${var2_list}"

		# Retrieving the results of the function above from the variable "files_to_use" into a variable to be used by the present script
		seed_mask_list_temp="${files_to_use}"

		# Giving feedback to the user
		echo
		echo -e "\nMask(s) entered:\n"

		# Establishing the initial subject numbering
		count=1

		for mask in ${seed_mask_list_temp}
		do
			# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
			counter=`printf "%02d" ${count}`

			# Outputing the mask(s) in a numbered list. Note the use of the bash command "basename" to show only the file name (and not the full path)
			echo -e "${counter}) `basename ${mask}`" # This sed command will transform the underscores introduced above into spaces again

			# Adding a unit to the numbering variable
			((count++))
		done

		echo
		echo -en "Is this correct? (y/n) "
		read conf

		# Check if the functional runs entered are correct
		if [ ${conf} = y ]
		then
			#################
			# Assigning the mask full path to the final variable
			seed_mask_list="${seed_mask_list_temp}"
			#################

			break
		else
			echo -e "\n"
			echo -en "Please correct the mask(s) entered "

			# Cleaning the contents for the variable below for correction
			unset seed_mask_list_temp files_to_use

			sleep 2
		fi
	else
		echo -e "\n"
		echo -en "*** No SEED mask was entered *** This is needed before proceeding - Please choose at least one "

		sleep 2
	fi
done
}

function tractography_process_nonHCP {
# This function will generate connectivity distributions from user-specified seed voxels or surface vertices (or both) for each subject
# It uses 1 parameter:
	# 1) Indicates what kind of seed will be used (single voxel, single mask, multiple masks)

# The "local" before the variable ensure that the variable is limited only to within this function
local seed_type="$1" # Indicating what type of seed will be used

# Asking the user for the path to the main output folder
while [ 1 ]
do
	echo
	echo -en "Now, please enter the *** main folder *** to hold the tractography output folder for each subject: "
	read tract_outputfolder_user

	# Giving feedback to the user
	echo
	echo -e "You entered the following path: ${tract_outputfolder_user}"
	echo -e "This is its contents, if any:\n`ls -d ${tract_outputfolder_user}/* 2> /dev/null | awk -F/ '{print $NF}'`"

	echo
	echo -en "Is this correct? (y/n) "
	read yesno

	if [ -n "${yesno}" ] && [ ${yesno} = y ]
	then
		#################
		# Assigning the tractography output folder full path to the final variable
		tract_outputfolder=${tract_outputfolder_user}
		#################

		break
	else
		echo
		echo -en "Please correct the tractography output folder "

		sleep 2
	fi
done

for SUBJ in ${SUBJLIST}
do
	# Checking this subject has a bedpostX folder
	bedpostx_folder_path_temp=`ls -d ${dwi_mainfolder_path}/${SUBJ}/${dwi_subject_subfolder} 2> /dev/null`

	# Checking if this variable is zero in length
	if [ -z "${bedpostx_folder_path_temp}" ]
	then
		# In this case, the variable is empty and the subject cannot be processed for tractography
		bedpostx_folder_path=none
	else
		# Gathering the bedpostx directory name into a variable, in oder to use it in the "--out" argument for dtifit command
		bedpostx_folder_path=`echo ${bedpostx_folder_path_temp}`

		# Giving feedback to the user
		echo
		echo -en "Found a \"bedpostx\" folder for subject *** ${SUBJ} ***. Now checking if it has registration done "

		# Checking if registration was processed for this subject's bedpostx folder. If linear and non-linear registration were done, a total of 11 files should be within the "xfms" subfolder (7 ".mat" files, 4 "*_warp.nii.gz" files)
		# Variable with the number of files within "xfms" folder
		reg_filenumbercount=`ls ${bedpostx_folder_path}/xfms/* 2> /dev/null | wc -l`

		if [ -n "${reg_filenumbercount}" ] && [ ${reg_filenumbercount} -eq 11 ]
		then
			echo
			echo -en "Found the expected number of files within the registration subfolder (xfms) = `echo ${reg_filenumbercount}` "

			sleep 1

			echo
		else
			# In this case, the variable is empty and the subject cannot be processed for tractography
			bedpostx_folder_path=none

			echo -e "\n"
			echo -e "##### Could not find a \"bedpostx\" folder OR registration files are missing for subject \"$SUBJ\" #####"
			echo -e "Please check the reason for this"
			echo -e "Skipping this subject for \"tractography\" processing\n"

			echo -en "Press any key to continue, or Ctrl+c to go back to the PROCESSING menu "
			read -n1 anykey

			# Gathering this subject into a variable for NOT processing. This will be used by the function "subjects_processed" in mainscrcall_funclib
			subj_NOT_process="${subj_NOT_process} ${SUBJ}"
		fi
	fi

	# This will see if any of the needed files for probtrackx are missing
	if [ "${bedpostx_folder_path}" != none ] # If this variable is equal to "none", it means that it is empty
	then
		if [ ${seed_type} = single_mask ]
		then
			# Creating the folder to hold the output from tractography, and the LOGFILES generated
			mkdir -p ${tract_outputfolder}/logfiles 2> /dev/null

			for seed_mask in ${seed_mask_list}
			do
				# Getting the mask name only into a variable (ROI name is always the 2nd element in the mask file name, side is 3rd element). Removed the "nii.gz" from the name using sed.
				seed_mask_nameonly=`basename ${seed_mask}| sed 's/.nii.gz//' | awk -F_ '{print $2"_"$3}'`

				# Issuing the command to create the output folder, then the probtrackx2 command into a text file for parallel processing
				# Putting the full command into a variable
				command_processing=`echo -e "mkdir -p ${tract_outputfolder}/${SUBJ}_${seed_mask_nameonly} 2> /dev/null; probtrackx2  -x ${seed_mask}  -l --onewaycondition -c 0.2 -S 2000 --steplength=0.5 -P 5000 --fibthresh=0.01 --distthresh=0.0 --sampvox=0.0 --xfm=${bedpostx_folder_path}/xfms/standard2diff.mat --invxfm=${bedpostx_folder_path}/xfms/diff2standard.mat --forcedir --opd -s ${bedpostx_folder_path}/merged -m ${bedpostx_folder_path}/nodif_brain_mask  --dir=${tract_outputfolder}/${SUBJ}_${seed_mask_nameonly} &> ${tract_outputfolder}/${SUBJ}_${mask_nameonly}/${SUBJ}_${seed_mask_nameonly}_probtrackx_screenoutput.txt"`
				
				# Adding the command to the ppss processing text file
				echo "${command_processing}" >> ${temp_folder}/${ppss_command_file}

				##### Creating a LOG file with the commands used for later QA if needed #####
				echo "OS name and version: ${os_nameandversion}; Command: probtrackx2; FSL `cat $FSLDIR/etc/fslversion`; Date and time: `current_date_time 2`" > ${tract_outputfolder}/logfiles/LOGFILE_tractography_${SUBJ}_${seed_mask_nameonly}.txt

				echo -e "Command \"probtrackx2\" to run probabilistic tractography" >> ${tract_outputfolder}/logfiles/LOGFILE_tractography_${SUBJ}_${seed_mask_nameonly}.txt

				echo -e "\n${command_processing}" >> ${tract_outputfolder}/logfiles/LOGFILE_tractography_${SUBJ}_${seed_mask_nameonly}.txt
			done
			#####################################
		fi

		# Gathering this subject into a variable for processing. This will be used by the function "subjects_processed" in mainscrcall_funclib
		subj_process="${subj_process} ${SUBJ}"
	fi
done
}

function tractography_process_HCP {
# This function will generate connectivity distributions from user-specified seed voxels or surface vertices (or both) for each subject
# It uses 1 parameter:
	# 1) Indicates what kind of seed will be used (single voxel, single mask, multiple masks)

# The "local" before the variable ensure that the variable is limited only to within this function
local variables_type="$1" # Indicating if the variables to be used within the probtrackx command are (1) preset or (2) not-preset

for SUBJ in ${SUBJLIST}
do
	# Checking this subject has a bedpostX folder (dwi_subject_subfolder=dMRI/T1w/Diffusion.bedpostX)
	bedpostx_folder_path_temp=`ls -d ${dwi_mainfolder_path}/${SUBJ}/${dwi_subject_subfolder} 2> /dev/null`

	# Checking if this variable is zero in length
	if [ -z "${bedpostx_folder_path_temp}" ]
	then
		# In this case, the variable is empty and the subject cannot be processed for tractography
		bedpostx_folder_path=none
	else
		# In this case, the variable has content and the subject will be processed for tractography
		bedpostx_folder_path=exist

		# Giving feedback to the user
		echo
		echo -en "Found a \"bedpostx\" folder for subject *** ${SUBJ} ***. Now checking if it has registration done "

		# Checking if registration was processed for this subject's bedpostx folder. Diffusion linear and non-linear registration for HCP data are within the folder subjID/structMRI/MRINonLinear/xfms, which has 3 files
		# Variable with the number of files within "xfms" folder
		reg_filenumbercount=`ls ${dwi_mainfolder_path}/${SUBJ}/structMRI/MNINonLinear/xfms/* 2> /dev/null | wc -l`

		if [ -n "${reg_filenumbercount}" ] && [ ${reg_filenumbercount} -eq 3 ]
		then
			echo
			echo -en "Found the expected number of files within the registration subfolder (xfms) = `echo ${reg_filenumbercount}` "

			sleep 1

			echo
		else
			# In this case, the variable is empty and the subject cannot be processed for tractography
			bedpostx_folder_path=none

			echo -e "\n"
			echo -e "##### Could not find a \"bedpostx\" folder OR registration files are missing for subject \"$SUBJ\" #####"
			echo -e "Please check the reason for this"
			echo -e "Skipping this subject for \"tractography\" processing\n"

			echo -en "Press any key to continue, or Ctrl+c to go back to the PROCESSING menu "
			read -n1 anykey

			# Gathering this subject into a variable for NOT processing. This will be used by the function "subjects_processed" in mainscrcall_funclib
			subj_NOT_process="${subj_NOT_process} ${SUBJ}"
		fi
	fi
done

# This will see if any of the needed files for probtrackx are missing
if [ "${bedpostx_folder_path}" != none ] # If this variable is equal to "none", it means that it is empty
then
	if [ ${variables_type} = not-preset ]
	then
		# Asking the user for the path to the main output folder
		while [ 1 ]
		do
			echo
			echo -en "Now, please enter the full path for the  *** main folder *** to hold the tractography output folder for each subject: "
			read tract_outputfolder_user

			# Giving feedback to the user
			echo
			echo -e "You entered the following path: ${tract_outputfolder_user}"
			echo -e "This is its contents, if any:\n`ls -d ${tract_outputfolder_user}/* 2> /dev/null | awk -F/ '{print $NF}'`"

			echo
			echo -en "Is this correct? (y/n) "
			read yesno

			if [ -n "${yesno}" ] && [ ${yesno} = y ]
			then
				#################
				# Assigning the tractography output folder full path to the final variable
				tract_outputfolder=${tract_outputfolder_user}
				#################

				break
			else
				echo
				echo -en "Please correct the tractography output folder "

				sleep 2
			fi
		done
	
		# Creating the folder to hold the output from tractography, and the LOGFILES generated
		mkdir -p ${tract_outputfolder}/logfiles 2> /dev/null

		for SUBJ in ${SUBJLIST}
		do
			for seed_mask in ${seed_mask_list}
			do
				# Getting the mask name only into a variable (ROI name is always the 2nd element in the mask file name, side is 3rd element). Removed the "nii.gz" from the name using sed.
				seed_mask_nameonly=`basename ${seed_mask}| sed 's/.nii.gz//' | awk -F_ '{print $2"_"$3}'`

				# Issuing the command to create the output folder, then the probtrackx2 command into a text file for parallel processing
				# Putting the full command into a variable
				command_processing=`echo -e "mkdir -p ${tract_outputfolder}/${SUBJ}_${seed_mask_nameonly} 2> /dev/null; probtrackx2  -x ${seed_mask}  -l --onewaycondition -c 0.2 -S 2000 --steplength=0.5 -P 5000 --fibthresh=0.01 --distthresh=0.0 --sampvox=0.0 --xfm=${bedpostx_folder_path}/xfms/standard2diff.mat --invxfm=${bedpostx_folder_path}/xfms/diff2standard.mat --forcedir --opd -s ${bedpostx_folder_path}/merged -m ${bedpostx_folder_path}/nodif_brain_mask  --dir=${tract_outputfolder}/${SUBJ}_${seed_mask_nameonly} &> ${tract_outputfolder}/${SUBJ}_${mask_nameonly}/${SUBJ}_${seed_mask_nameonly}_probtrackx2_screenoutput.txt"`
				
				# Adding the command to the ppss processing text file
				echo "${command_processing}" >> ${temp_folder}/${ppss_command_file}

				##### Creating a LOG file with the commands used for later QA if needed #####
				echo "OS name and version: ${os_nameandversion}; Command: probtrackx2; FSL `cat $FSLDIR/etc/fslversion`; Date and time: `current_date_time 2`" > ${tract_outputfolder}/logfiles/LOGFILE_proceed-tractography_probtrackx2_${SUBJ}_${seed_mask_nameonly}.txt

				echo -e "Command \"probtrackx2\" to run probabilistic tractography" >> ${tract_outputfolder}/logfiles/LOGFILE_proceed-tractography_probtrackx2_${SUBJ}_${mask_nameonly}.txt

				echo -e "\n${command_processing}" >> ${tract_outputfolder}/logfiles/LOGFILE_proceed-tractography_probtrackx2_${SUBJ}_${seed_mask_nameonly}.txt
				
				# Gathering this subject into a variable for processing. This will be used by the function "subjects_processed" in mainscrcall_funclib
				subj_process="${subj_process} ${SUBJ}"
			done
			#####################################
		done
	
	elif [ ${variables_type} = preset ]
	then
		# Creating the folder to hold the output from tractography, and the LOGFILES generated
		mkdir -p ${tract_outputfolder}/logfiles 2> /dev/null

		# Asking the user what tracts to be processed
		echo
		echo -e "Please choose which tracts to be processed:"
		
		echo
		echo -e "*** Option 1a *** (spheres masks - faster): tract01_SI_L_sphere tract02_SI_L_sphere tract03_SI_L_sphere tract04_SI_L_sphere tract01_Brainstem_R_sphere tract02_Brainstem_R_sphere tract03_Brainstem_R_sphere 
		tract04_Brainstem_R_sphere"
		
		echo
		echo -e "*** Option 1b *** (spheres masks - faster): tract01_SI_R_sphere tract02_SI_R_sphere tract03_SI_R_sphere tract04_SI_R_sphere tract01_Brainstem_L_sphere tract02_Brainstem_L_sphere tract03_Brainstem_L_sphere tract04_Brainstem_L_sphere"
		
		echo
		echo -e "*** Option 1c *** (spheres masks - faster): tract05_SI_L_sphere tract06_SI_L_sphere tract05_SI_R_sphere tract06_SI_R_sphere"
		
		echo
		echo -e "*** Option 1d *** (spheres masks - faster): tract07_SI_L_sphere tract08_SI_L_sphere tract09_SI_L_sphere tract10_SI_L_sphere tract07_SI_R_sphere tract08_SI_R_sphere tract09_SI_R_sphere tract10_SI_R_sphere"
		
		echo
		echo -e "*** Option 2a *** (full masks - slower): tract01_SI_L_full tract02_SI_L_full tract03_SI_L_full tract04_SI_L_full tract01_Brainstem_R_full tract02_Brainstem_R_full tract03_Brainstem_R_full tract04_Brainstem_R_full"
		
		echo
		echo -e "*** Option 2b *** (full masks - slower): tract01_SI_R_full tract02_SI_R_full tract03_SI_R_full tract04_SI_R_full tract01_Brainstem_L_full tract02_Brainstem_L_full tract03_Brainstem_L_full tract04_Brainstem_L_full"
		
		echo
		echo -e "*** Option 2c *** (full masks - slower): tract05_SI_L_full tract06_SI_L_full tract05_SI_R_full tract06_SI_R_full"
		
		echo
		echo -e "*** Option 2d *** (spheres masks - faster): tract07_SI_L_full tract08_SI_L_full tract09_SI_L_full tract10_SI_L_full tract07_SI_R_full tract08_SI_R_full tract09_SI_R_full tract10_SI_R_full"
		
		echo
		echo -en "Please enter your option here: "
		read tracts_process_user

		# Ask for user input to continue
		while [ 1 ]
		do
			case ${tracts_process_user} in
			1a)
				# Giving feedback to the user
				echo
				echo -en "Using Option 1a: tract01_SI_L_sphere tract02_SI_L_sphere tract03_SI_L_sphere tract04_SI_L_sphere tract01_Brainstem_R_sphere tract02_Brainstem_R_sphere tract03_Brainstem_R_sphere tract04_Brainstem_R_sphere "
				
				# Assigning a value to the variable "tract_list"
				tract_list="tract01_SI_L_sphere tract02_SI_L_sphere tract03_SI_L_sphere tract04_SI_L_sphere tract01_Brainstem_R_sphere tract02_Brainstem_R_sphere tract03_Brainstem_R_sphere tract04_Brainstem_R_sphere"
				
				sleep 2

				break
				;;
			1b)
				# Giving feedback to the user
				echo
				echo -en "Using Option 1b: tract01_SI_R_sphere tract02_SI_R_sphere tract03_SI_R_sphere tract04_SI_R_sphere tract01_Brainstem_L_sphere tract02_Brainstem_L_sphere tract03_Brainstem_L_sphere tract04_Brainstem_L_sphere "
				
				# Assigning a value to the variable "tract_list"
				tract_list="tract01_SI_R_sphere tract02_SI_R_sphere tract03_SI_R_sphere tract04_SI_R_sphere tract01_Brainstem_L_sphere tract02_Brainstem_L_sphere tract03_Brainstem_L_sphere tract04_Brainstem_L_sphere"
				
				sleep 2

				break
				;;
			1c)
				# Giving feedback to the user
				echo
				echo -en "Using Option 1c: tract05_SI_L_sphere tract06_SI_L_sphere tract05_SI_R_sphere tract06_SI_R_sphere "
				
				# Assigning a value to the variable "tract_list"
				tract_list="tract05_SI_L_sphere tract06_SI_L_sphere tract05_SI_R_sphere tract06_SI_R_sphere"
				
				sleep 2

				break
				;;
			1d)
				# Giving feedback to the user
				echo
				echo -en "Using Option 1d: tract07_SI_L_sphere tract08_SI_L_sphere tract09_SI_L_sphere tract10_SI_L_sphere tract07_SI_R_sphere tract08_SI_R_sphere tract09_SI_R_sphere tract10_SI_R_sphere "
				
				# Assigning a value to the variable "tract_list"
				tract_list="tract07_SI_L_sphere tract08_SI_L_sphere tract09_SI_L_sphere tract10_SI_L_sphere tract07_SI_R_sphere tract08_SI_R_sphere tract09_SI_R_sphere tract10_SI_R_sphere"
				
				sleep 2

				break
				;;
			2a)
				# Giving feedback to the user
				echo
				echo -en "Using Option 2a: tract01_SI_L_full tract02_SI_L_full tract03_SI_L_full tract04_SI_L_full tract01_Brainstem_R_full tract02_Brainstem_R_full tract03_Brainstem_R_full tract04_Brainstem_R_full "
			
				# Assigning a value to the variable "tract_list"
				tract_list="tract01_SI_L_full tract02_SI_L_full tract03_SI_L_full tract04_SI_L_full tract01_Brainstem_R_full tract02_Brainstem_R_full tract03_Brainstem_R_full tract04_Brainstem_R_full"
				
				sleep 2
				
				break
				;;
			2b)
				# Giving feedback to the user
				echo
				echo -en "Using Option 2b: tract01_SI_R_full tract02_SI_R_full tract03_SI_R_full tract04_SI_R_full tract01_Brainstem_L_full tract02_Brainstem_L_full tract03_Brainstem_L_full tract04_Brainstem_L_full "
			
				# Assigning a value to the variable "tract_list"
				tract_list="tract01_SI_R_full tract02_SI_R_full tract03_SI_R_full tract04_SI_R_full tract01_Brainstem_L_full tract02_Brainstem_L_full tract03_Brainstem_L_full tract04_Brainstem_L_full"
				
				sleep 2
				
				break
				;;
			2c)
				# Giving feedback to the user
				echo
				echo -en "Using Option 2c: tract05_SI_L_full tract06_SI_L_full tract05_SI_R_full tract06_SI_R_full "
			
				# Assigning a value to the variable "tract_list"
				tract_list="tract05_SI_L_full tract06_SI_L_full tract05_SI_R_full tract06_SI_R_full"
				
				sleep 2
				
				break
				;;
			2d)
				# Giving feedback to the user
				echo
				echo -en "Using Option 2d: tract07_SI_L_full tract08_SI_L_full tract09_SI_L_full tract10_SI_L_full tract07_SI_R_full tract08_SI_R_full tract09_SI_R_full tract10_SI_R_full "
			
				# Assigning a value to the variable "tract_list"
				tract_list="tract07_SI_L_full tract08_SI_L_full tract09_SI_L_full tract10_SI_L_full tract07_SI_R_full tract08_SI_R_full tract09_SI_R_full tract10_SI_R_full"
				
				sleep 2
				
				break
				;;
			*)
				echo -e "No valid option chosen"
				echo -en "Please re-enter an option "

				sleep 2
				;;
			esac
		done
		
		##### Preset variables needed for probtrackx command #####
		mask_folder=/panfs/roc/groups/12/moanae/moanae/mri_software/masks
		output_path=/panfs/roc/groups/12/moanae/moanae/project_HCP/analysis/tractography
# 		output_path=/home/moanae/moanae/project_HCP/analysis/templates_trials/temp_trials
# 		output_path=/home/moanae/moanae/project_HCP/analysis/templates_trials/temp_trials02
# 		output_path=/home/moanae/moanae/project_HCP/analysis/templates_trials/trials_using-my-scripts
		waypoint_file=waypoints.txt
		
		for SUBJ in ${SUBJLIST}
		do
			# Loop to go through each of the tracts to be processed and assign the appropriate variables to each
			for tract in ${tract_list}
			do 
				# Files for SI left sphere
				if [ ${tract} = tract01_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract02_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract03_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				elif [ ${tract} = tract04_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				elif [ ${tract} = tract05_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract06_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract07_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz
				elif [ ${tract} = tract08_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz
				elif [ ${tract} = tract09_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				elif [ ${tract} = tract10_SI_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				# Files for SI left full
				elif [ ${tract} = tract01_SI_L_full ]
				then
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract02_SI_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract03_SI_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				elif [ ${tract} = tract04_SI_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				elif [ ${tract} = tract05_SI_L_full ]
				then
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract06_SI_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract07_SI_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz
				elif [ ${tract} = tract08_SI_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz
				elif [ ${tract} = tract09_SI_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				elif [ ${tract} = tract10_SI_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_L_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_L_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				# Files for SI right sphere
				elif [ ${tract} = tract01_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract02_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract03_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				elif [ ${tract} = tract04_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				elif [ ${tract} = tract05_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract06_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract07_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz
				elif [ ${tract} = tract08_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz
				elif [ ${tract} = tract09_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				elif [ ${tract} = tract10_SI_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				# Files for SI right full
				elif [ ${tract} = tract01_SI_R_full ]
				then
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract02_SI_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract03_SI_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				elif [ ${tract} = tract04_SI_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				elif [ ${tract} = tract05_SI_R_full ]
				then
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract06_SI_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract07_SI_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz
				elif [ ${tract} = tract08_SI_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz
				elif [ ${tract} = tract09_SI_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				elif [ ${tract} = tract10_SI_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/Juelich_SI_R_FULL.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/JHU-ICBM-tracts_Corticospinal_R_Thal-section.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				# Files for Brainstem right sphere
				elif [ ${tract} = tract01_Brainstem_R_sphere ]; \
				then 
					mask_seed=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract02_Brainstem_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract03_Brainstem_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				elif [ ${tract} = tract04_Brainstem_R_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_Brainstem_R_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				# Files for Brainstem right full
				elif [ ${tract} = tract01_Brainstem_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/HarvardOxford_Brainstem_R.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract02_Brainstem_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/HarvardOxford_Brainstem_R.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract03_Brainstem_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/HarvardOxford_Brainstem_R.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				elif [ ${tract} = tract04_Brainstem_R_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/HarvardOxford_Brainstem_R.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_L.nii.gz
				# Files for Brainstem left sphere
				elif [ ${tract} = tract01_Brainstem_L_sphere ]; \
				then 
					mask_seed=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract02_Brainstem_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract03_Brainstem_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				elif [ ${tract} = tract04_Brainstem_L_sphere ]
				then 
					mask_seed=spheres/MNI152_2mm/CNV_Brainstem_L_sphere_5mm.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				# Files for Brainstem left full
				elif [ ${tract} = tract01_Brainstem_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/HarvardOxford_Brainstem_L.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract02_Brainstem_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/HarvardOxford_Brainstem_L.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					waypoint_list="binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz ${mask_stop}"
					output_foldername=${tract}
					exclusion_file=""
				elif [ ${tract} = tract03_Brainstem_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/HarvardOxford_Brainstem_L.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_R_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				elif [ ${tract} = tract04_Brainstem_L_full ]
				then 
					mask_seed=binary_2mm/thresh25_masks/HarvardOxford_Brainstem_L.nii.gz
					mask_stop=spheres/MNI152_2mm/CNV_SI_L_sphere_5mm.nii.gz
					waypoint_list="${mask_stop}"
					output_foldername=${tract}
					exclusion_file=--avoid=${mask_folder}/binary_2mm/thresh25_masks/HarvardOxford_Thalamus_R.nii.gz
				fi

				# Creating the unique folder for the subj and tract to be processed
				mkdir -p ${output_path}/${SUBJ}_${output_foldername}
				
				# Looping though each waypoint mask to create waypoint.txt file needed for probtrackx
				for waypoint in ${waypoint_list}
				do
					echo ${mask_folder}/${waypoint} >> ${output_path}/${SUBJ}_${output_foldername}/${waypoint_file}
				done

				# Issuing the command to create the output folder, then the probtrackx2 command into a text file for parallel processing
				# Putting the full command into a variable
				command_processing=`echo -e "probtrackx2 -x ${mask_folder}/${mask_seed} -l --modeuler --onewaycondition --wayorder -c 0.2 -S 2000 --steplength=0.5 -P 5000 --fibthresh=0.01 --distthresh=0.0 --sampvox=0.0 --xfm=${dwi_mainfolder_path}/${SUBJ}/structMRI/MNINonLinear/xfms/standard2acpc_dc.nii.gz --invxfm=${dwi_mainfolder_path}/${SUBJ}/structMRI/MNINonLinear/xfms/acpc_dc2standard.nii.gz ${exclusion_file} --stop=${mask_folder}/${mask_stop} --forcedir --opd -s ${dwi_mainfolder_path}/${SUBJ}/${dwi_subject_subfolder}/merged -m ${dwi_mainfolder_path}/${SUBJ}/${dwi_subject_subfolder}/nodif_brain_mask --dir=${output_path}/${SUBJ}_${output_foldername} --waypoints=${output_path}/${SUBJ}_${output_foldername}/${waypoint_file} --waycond=AND &> ${output_path}/${SUBJ}_${output_foldername}/${SUBJ}_${output_foldername}_probtrackx2_screenoutput.txt"`
				
				# Adding the command to the ppss processing text file
				echo "${command_processing}" >> ${temp_folder}/${ppss_command_file}

				##### Creating a LOG file with the commands used for later QA if needed #####
				echo "OS name and version: ${os_nameandversion}; Command: probtrackx2; FSL `cat $FSLDIR/etc/fslversion`; Date and time: `current_date_time 2`" > ${output_path}/${SUBJ}_${output_foldername}/LOGFILE_tractography_probtrackx2_${SUBJ}_${tract}.txt

				echo -e "Command \"probtrackx2\" to run probabilistic tractography" >> ${output_path}/${SUBJ}_${output_foldername}/LOGFILE_tractography_probtrackx2_${SUBJ}_${tract}.txt
				
				echo -e "\n${command_processing}" >> ${output_path}/${SUBJ}_${output_foldername}/LOGFILE_tractography_probtrackx2_${SUBJ}_${tract}.txt
			done
			
			# Gathering this subject into a variable for processing. This will be used by the function "subjects_processed" in mainscrcall_funclib
			subj_process="${subj_process} ${SUBJ}"
		done
		#####################################		
	fi
fi
}

###########################################################################
###############			MAIN MENU ROUTINE			###############
###########################################################################

##### 			VARIABLES TO BE USED IN THIS SCRIPT 		#####
# Assigning a variable to hold the main location of the files generated by this script
temp_folder=/tmp/ppss_tempdir_tractography # Where the temporary files will be held
ppss_command_file=tractography_files_list.txt

dwi_mainfolder_path=${SUBJS_FOLDERS_PATH} # Where the DWI files are. Can be modified by the user in this script.
dwi_subject_subfolder=DWI/DWI_*.bedpostX # To be used with "ls" command: The path to the subfolder within each subject's folder
######################################################################

######### Script Main menu - Informing the user what this script does and asking for input #########
clear

# Changing directory to /tmp in case the script commits some error - this will make any commands to be run within /tmp, preventing damage to the file system
cd /tmp

# Removing temporary folders and files created, just in case they were not deleted properly by a previously ran script
rm -r ${temp_folder} 2> /dev/null

# Creating a temporary folder to hold the text file with the subjects to be processed
mkdir ${temp_folder} 2> /dev/null

echo -e "This script will use the FSL tool \"probtrackx2\", which does probabilistic tracking with crossing fibres."

echo
echo -e "###############################################################"
echo -e "*** IMPORTANT - this program needs that \"bedpostx\" to be previously ran, as it uses the output files of \"bedpostx\" as its input."
echo -e "###############################################################"

# MAIN MENU
echo
echo -e "Please choose if you want to:"
echo -e "\t1. Proceed with tractography processing using SINGLE MASK seed (non-HCP data)"
echo -e "\t2. Proceed with tractography processing using *** HCP data ***"
echo -e "\t0. Back to main menu\n"

echo -en "Please enter your option: "
read tractography_process_steps

# Ask for user input to continue
while [ 1 ]
do
	case ${tractography_process_steps} in
	0)
		echo
		echo -en "Going back to the PROCESSING menu "

		sleep 2

		exit
		;;
	1)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "mainscrcall_dwi_tractography:does probabilistic tracking with crossing fibres" FSL "(tractography_process) bedpostx"

		####### MAIN PATH TO SUBJECTS FOLDER CHECK ##############
		# Checking if used the original path to DWI files or the user entered another one ("default_path" variable originates from function "DWI_mainfolder" in "functionslibr_FSL")
		if [ ${default_path} = yes ]
		then
			# Creating a log file. STEP 1.5 of 2 = midscript call
			# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. Reason for midscript call
			log_file_scripts_used midscript "Used the default path for DWI data: ${dwi_mainfolder_path}"

		elif [ ${default_path} = no ]
		then
			# Creating a log file. STEP 1.5 of 2 = midscript call
			# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. Reason for midscript call
			log_file_scripts_used midscript "Used an alternative path for DWI data: ${dwi_mainfolder_path}"
		fi
		#########################################################

		##### GATHERING THE PATH TO THE ANALYSIS FOLDER #####
		# FUNCTION CALL: calls the function "analysis_mainfolder" in "mainscrcall_funclib" to allow the user to select the path to the subject's folders
		analysis_mainfolder DWI

		# Assigning the output variable from the function above to a local variable
		dwi_mainfolder_path=${ANALYSIS_MAINFOLDER_PATH}
		######################################################
		
		# Giving information to the user on what this script will do
		echo
		echo -e "This script will generate connectivity distributions from user-specified seed voxels or surface vertices (or both) for the subjects listed:\n"

		# Making the subjects within the "SUBJLIST" variable to be listed in a numbered list for the user
		# Establishing the initial subject numbering
		count=1

		for SUBJ in ${SUBJLIST}
		do
			# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
			counter=`printf "%02d" ${count}`

			echo "${counter}) ${SUBJ}"

			# Adding a unit to the numbering variable
			((count++))
		done

		# Cleaning the contents of the variable below
		unset count counter

		# FUNCTION CALL: Calls the function "seed_mask_choice" to allow the user to choose the atlas(es) to be used
		seed_mask_choice

		# FUNCTION CALL: Calls the function "tractography_process_nonHCP" to generate connectivity distributions from user-specified seed voxels or surface vertices (or both) for each subject. Note the parameter to indicate that a "single mask" will be used as seed
		tractography_process_nonHCP single_mask

		# Checking if there is a PPSS processing file
		if [ -f "${temp_folder}/${ppss_command_file}" ] # Checking if this file exists and is a file
		then
			# Calling the function "parallel_processing_ppss" to run the motion outliers command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
			# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
			parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

			echo -e "\n"
			echo -e "Finished processing at: `current_date_time 2`"
		else
			echo
			echo -en "*** No PPSS processing file was generated - please check the reason ***"
			echo -en "Press any key to continue "
			read -n1 anykey
		fi

		###### Listing the subjects processed ######
		# FUNCTION CALL: Calls the function "subjects_listed2process" in "mainscrcall_funclib" to list to the user all subjects processed and those not processed by the script invoking it
		subjects_listed2process
		################################################

		# Ask for user input to continue
		echo
		echo -en "Press any key to continue to the PROCESSING menu "
		read -n1 anykey

		echo
		echo -e "Finished processing for the above subjects"

		break
		;;
	2)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "mainscrcall_dwi_tractography:does probabilistic tracking with crossing fibres" FSL "(tractography_process) bedpostx"

		####### MAIN PATH TO SUBJECTS FOLDER CHECK ##############
		# Checking if used the original path to DWI files or the user entered another one ("default_path" variable originates from function "DWI_mainfolder" in "functionslibr_FSL")
		if [ ${default_path} = yes ]
		then
			# Creating a log file. STEP 1.5 of 2 = midscript call
			# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. Reason for midscript call
			log_file_scripts_used midscript "Used the default path for DWI data: ${dwi_mainfolder_path}"

		elif [ ${default_path} = no ]
		then
			# Creating a log file. STEP 1.5 of 2 = midscript call
			# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. Reason for midscript call
			log_file_scripts_used midscript "Used an alternative path for DWI data: ${dwi_mainfolder_path}"
		fi
		#########################################################

		##### GATHERING THE PATH TO THE ANALYSIS FOLDER #####
		# FUNCTION CALL: calls the function "analysis_mainfolder" in "mainscrcall_funclib" to allow the user to select the path to the subject's folders
		analysis_mainfolder dMRI_HCP

		# Assigning the output variable from the function above to a local variable
		dwi_mainfolder_path=${ANALYSIS_MAINFOLDER_PATH}
		
		# Modifying the below variable to be compatible with HCP data
		dwi_subject_subfolder=dMRI/T1w/Diffusion.bedpostX # To be used with "ls" command: The path to the subfolder within each subject's folder
		######################################################
		
		# Giving information to the user on what this script will do
		echo
		echo -e "This script will generate connectivity distributions from user-specified seed voxels or surface vertices (or both) for the subjects listed:\n"

		# Making the subjects within the "SUBJLIST" variable to be listed in a numbered list for the user
		# Establishing the initial subject numbering
		count=1

		for SUBJ in ${SUBJLIST}
		do
			# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
			counter=`printf "%02d" ${count}`

			echo "${counter}) ${SUBJ}"

			# Adding a unit to the numbering variable
			((count++))
		done

		# Cleaning the contents of the variable below
		unset count counter

		# Asking user if this is a pre-set analysis (with the needed variables for probtrackx command rigidly set in code)
		while [ 1 ]
		do
			echo
			echo -en "The variables for analyses are (1) preset with all the variables needed pre-assigned, or (2) not-preset? "
			read HCP_analysistype_user

			# Checking the analysestype choosen
			if [ ${HCP_analysistype_user} = 1 ]
			then
				HCP_analysistype=preset
			
			elif [ ${HCP_analysistype_user} = 2 ]
			then
				HCP_analysistype=not-preset
			fi
			
			# Giving feedback to the user
			echo
			echo -e "You entered option: ${HCP_analysistype}"

			echo
			echo -en "Is this correct? (y/n) "
			read yesno

			if [ -n "${yesno}" ] && [ ${yesno} = y ]
			then
				# Exiting the loop
				break
			else
				echo
				echo -en "Please correct the option for variables for the analyses "

				sleep 2
			fi
		done

		# Checking if the variables for analyses are preset. If not, the user need to choose the seed mask using the function below
		if [ ${HCP_analysistype} = not-preset ]
		then
			# FUNCTION CALL: Calls the function "seed_mask_choice" to allow the user to choose the SEED mask (s) to be used
			seed_mask_choice
		fi
		
		# FUNCTION CALL: Calls the function "tractography_process_nonHCP" to generate connectivity distributions from user-specified seed voxels or surface vertices (or both) for each subject. Note the parameter to indicate that a "single mask" will be used as seed
		tractography_process_HCP ${HCP_analysistype}

		# Checking if there is a PPSS processing file
		if [ -f "${temp_folder}/${ppss_command_file}" ] # Checking if this file exists and is a file
		then
			# Calling the function "parallel_processing_ppss" to run the motion outliers command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
			# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
			parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

			echo -e "\n"
			echo -e "Finished processing at: `current_date_time 2`"
		else
			echo
			echo -en "*** No PPSS processing file was generated - please check the reason ***"
			echo -en "Press any key to continue "
			read -n1 anykey
		fi

		###### Listing the subjects processed ######
		# FUNCTION CALL: Calls the function "subjects_listed2process" in "mainscrcall_funclib" to list to the user all subjects processed and those not processed by the script invoking it
		subjects_listed2process
		################################################

		# Ask for user input to continue
		echo
		echo -en "Press any key to continue to the PROCESSING menu "
		read -n1 anykey

		echo
		echo -e "Finished processing for the above subjects"

		break
		;;
	*)
		echo -e "No valid option chosen"
		echo -en "Please re-enter an option "

		sleep 2
		;;
	esac
done

# Creating a log file. STEP 2 of 2 = finish call
# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 1 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. List of subjects processed
log_file_scripts_used finish "${SUBJLIST}"

# Removing temporary folders and files created
rm -r ${temp_folder} 2> /dev/null