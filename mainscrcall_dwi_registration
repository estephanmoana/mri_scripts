#! /bin/bash

# Script to do registration using the same steps as the FDT GUI registration

# Sourcing of functions library files #
. mainscrcall_funclib

# Setting Ctrl + C as key combination to go back to PROCESSING menu. Also signals to the log file (=if there is one) that this script was interrupted
trap "echo -en '\n\nGoing back to the PROCESSING menu '; sleep 2; log_file_scripts_used interrupt; exit" SIGINT

# Checking if variables are not empty
emptvar=${MEDIA}
var_checked="THE MAIN FOLDER HOLDING MRI DATA"
checkemptvar

emptvar=${EXPERIMENT}
var_checked="THE EXPERIMENT NAME"
checkemptvar

emptvar="${SUBJLIST}"
var_checked="THE SUBJECT(S) TO BE PROCESSED"
checkemptvar

emptvar="${SUBJS_FOLDERS_PATH}"
var_checked="THE FOLDER CONTAINING ALL SUBJECTS' FOLDERS"
checkemptvar

##########			FUNCTIONS USED IN THIS SCRIPT			##########
function registration_process {
# This function will check if all files needed for bedpostx are available for each subject
# If it find all files, it will then call "bedpostx" to runs Markov Chain Monte Carlo sampling to build up distributions on diffusion parameters at each voxel,and create all the files necessary for running probabilistic tractography

# Collecting into a variable the full path for the bedpostx folder for the subject being processed
bedpostx_folder=`ls -d ${dwi_mainfolder_path}/${SUBJ}/${dwi_subject_subfolder}.bedpostX 2> /dev/null`

# Collecting into a variable the nodif_brain.nii.gz file if available within the bedpostx folder for the subject being processed
nodiff_brain_file=`ls ${bedpostx_folder}/${dwi_nodiff_outputfile}_brain.nii.gz 2> /dev/null`

# Checking if either of the above variables are empty
if [ -z "${bedpostx_folder}" ] # Checking if this variable is zero in length
then
	bedpostx_folder=none

elif [ -z "${nodiff_brain_file}" ] # Checking if this variable is zero in length
then
	nodiff_brain_file=none
fi

# This will check if the "nodif_brain.nii.gz" file exists
if [ "${bedpostx_folder}" != none ] && [ "${nodiff_brain_file}" != none ] # IF any of these variables is equal to "none", it means that they are empty
then
	# Giving feedback to the user
	echo
	echo -en "Issuing all the necessary steps for registration for subject *** ${SUBJ} *** into a text file for parallel processing "

	#####################################
	# Issuing the commands for registration in the same order as the FDT GUI (as outputed when called using FSL 5.0.5)
	# Putting the full command into a variable
	command_processing=`echo -e "flirt -in ${nodiff_brain_file} -ref ${anatfile_fullpath} -omat ${bedpostx_folder}/xfms/diff2str.mat -searchrx -90 90 -searchry -90 90 -searchrz -90 90 -dof 6 -cost corratio; convert_xfm -omat ${bedpostx_folder}/xfms/str2diff.mat -inverse ${bedpostx_folder}/xfms/diff2str.mat; flirt -in ${anatfile_fullpath} -ref ${FSLDIR}/data/standard/MNI152_T1_1mm_brain -omat ${bedpostx_folder}/xfms/str2standard.mat -searchrx -90 90 -searchry -90 90 -searchrz -90 90 -dof 12 -cost corratio; convert_xfm -omat ${bedpostx_folder}/xfms/standard2str.mat -inverse ${bedpostx_folder}/xfms/str2standard.mat; convert_xfm -omat ${bedpostx_folder}/xfms/diff2standard.mat -concat ${bedpostx_folder}/xfms/str2standard.mat ${bedpostx_folder}/xfms/diff2str.mat; convert_xfm -omat ${bedpostx_folder}/xfms/standard2diff.mat -inverse ${bedpostx_folder}/xfms/diff2standard.mat; fnirt --in=${anatfile_nonbetted_fullpath} --aff=${bedpostx_folder}/xfms/str2standard.mat --cout=${bedpostx_folder}/xfms/str2standard_warp --config=T1_2_MNI152_2mm; invwarp -w ${bedpostx_folder}/xfms/str2standard_warp -o ${bedpostx_folder}/xfms/standard2str_warp -r ${anatfile_fullpath}; convertwarp -o ${bedpostx_folder}/xfms/diff2standard_warp -r ${FSLDIR}/data/standard/MNI152_T1_2mm -m ${bedpostx_folder}/xfms/diff2str.mat -w ${bedpostx_folder}/xfms/str2standard_warp; convertwarp -o ${bedpostx_folder}/xfms/standard2diff_warp -r ${bedpostx_folder}/nodif_brain_mask -w ${bedpostx_folder}/xfms/standard2str_warp --postmat=${bedpostx_folder}/xfms/str2diff.mat"`
	
	# Adding the command to the ppss processing text file
	echo "${command_processing}" >> ${temp_folder}/${ppss_command_file}

	##### Creating a LOG file with the commands used for later QA if needed #####
	echo "OS name and version: ${os_nameandversion}; Commands: flirt, fnirt, convert_xfm, invwarp, convertwarp; FSL `cat $FSLDIR/etc/fslversion`; Date and time: `current_date_time 2`" > ${bedpostx_folder}/LOGFILE_DWI-registration_several-FSL-tools_${dwi_filename}.txt

	echo -e "Commands needed, in the specific order, to do registration for DWI image files using the same steps as the FDT GUI" >> ${bedpostx_folder}/LOGFILE_DWI-registration_several-FSL-tools_${dwi_filename}.txt

	echo -e "\n${command_processing}" >> ${bedpostx_folder}/LOGFILE_DWI-registration_several-FSL-tools_${dwi_filename}.txt
	#####################################

	# Gathering this subject into a variable for processing. This will be used by the function "subjects_processed" in functionslibr_FSL
	subj_process="${subj_process} ${SUBJ}"
else
	echo -e "\n"
	echo -e "##### One of the necessary files for registration was not found for subject \"$SUBJ\" #####"
	echo -e "Please check the \"bedpostX\" folder for this subject"
	echo -e "Skipping this subject for registration processing\n"

	echo -en "Press any key to continue "
	read -n1 anykey

	# Gathering this subject into a variable for NOT processing. This will be used by the function "subjects_processed" in functionslibr_FSL
	subj_NOT_process="${subj_NOT_process} ${SUBJ}"
fi
}

###########################################################################
###############			MAIN MENU ROUTINE			###############
###########################################################################

##### 			VARIABLES TO BE USED IN THIS SCRIPT 		#####
# Assigning a variable to hold the main location of the files generated by this script
temp_folder=/tmp/ppss_tempdir_registration # Where the temporary files will be held
ppss_command_file=registration_steps_list.txt

dwi_mainfolder_path=${SUBJS_FOLDERS_PATH} # Where the DWI files are. Can be modified by the user in this script.
dwi_subject_subfolder=DWI/DWI_* # To be used with "ls" command: The path to the subfolder within each subject's folder
dwi_nodiff_outputfile=nodif # The output file name
######################################################################

######### Script Main menu - Informing the user what this script does and asking for input #########
clear

# Changing directory to /tmp in case the script commits some error - this will make any commands to be run within /tmp, preventing damage to the file system
cd /tmp

# Removing temporary folders and files created, just in case they were not deleted properly by a previously ran script
rm -r ${temp_folder} 2> /dev/null

# Creating a temporary folder to hold the text file with the subjects to be processed
mkdir ${temp_folder} 2> /dev/null

echo -e "This script will do the registration in order for the tractography results be stored in other spaces besides diffusion space"
echo -e "It implements the same steps as the registration done via FDT GUI (copied the commands outputed in the terminal window (FSL 5.0.5))"

echo
echo -e "###############################################################"
echo -e "*** IMPORTANT - this program needs files with specific names:"
echo -e "1. nodif_brain.nii.gz: non-brain tissue removed nodif (i.e. on a volume with no diffusion weighting)."
echo -e "2. T1-weighted anatomical with non-brain tissue removed: For linear registration to structural space."
echo -e "3. T1-weighted anatomical without non-brain tissue removed: For non-linear registration."
echo -e "###############################################################"

##### GATHERING THE PATH TO THE ANALYSIS FOLDER #####
# FUNCTION CALL: calls the function "analysis_mainfolder" in "mainscrcall_funclib" to allow the user to select the path to the subject's folders
analysis_mainfolder DWI

# Assigning the output variable from the function above to a local variable
dwi_mainfolder_path=${ANALYSIS_MAINFOLDER_PATH}
######################################################

# MAIN MENU
echo
echo -e "Please choose if you want to:"
echo -e "\t1. Proceed with registration processing"
echo -e "\t0. Back to main menu\n"

echo -en "Please enter your option: "
read reg_process_steps

# Ask for user input to continue
while [ 1 ]
do
	case ${reg_process_steps} in
	0)
		echo
		echo -en "Going back to the PROCESSING menu "

		sleep 2

		exit
		;;
	1)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "mainscrcall_dwi_registration:Implements registration steps as the FDT GUI" FSL "(registration_process) FLIRT FNIRT"

		####### MAIN PATH TO SUBJECTS FOLDER CHECK ##############
		# Checking if used the original path to DWI files or the user entered another one ("default_path" variable originates from function "DWI_mainfolder" in "functionslibr_FSL")
		if [ ${default_path} = yes ]
		then
			# Creating a log file. STEP 1.5 of 2 = midscript call
			# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. Reason for midscript call
			log_file_scripts_used midscript "Used the default path for DWI data: ${dwi_mainfolder_path}"

		elif [ ${default_path} = no ]
		then
			# Creating a log file. STEP 1.5 of 2 = midscript call
			# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. Reason for midscript call
			log_file_scripts_used midscript "Used an alternative path for DWI data: ${dwi_mainfolder_path}"
		fi
		#########################################################

		# Giving information to the user on what this script will do
		echo
		echo -e "This script will do registration for the DWI image file for the subjects listed:\n"

		# Making the subjects within the "SUBJLIST" variable to be listed in a numbered list for the user
		# Establishing the initial subject numbering
		count=1

		for SUBJ in ${SUBJLIST}
		do
			# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
			counter=`printf "%02d" ${count}`

			echo "${counter}) ${SUBJ}"

			# Adding a unit to the numbering variable
			((count++))
		done

		# Cleaning the contents of the variable below
		unset count counter

		# FUNCTION CALL: Calling function "path_ANATfiles_processing" in "mainscrcall_funclib" to allow the user to enter the common path to the anatomical files for all subjects being processed
		path_ANATfiles_processing

		# Loop to process all subjects
		for SUBJ in ${SUBJLIST}
		do
			# Checking if the anatomical file to be used has a different path than the subject's "anat" folder
			if [ ${fslanat_output_path} = none ]
			then
				# Colecting info for the ANATOMICAL file for full analysis
				anatfile_fullpath=`ls ${dwi_mainfolder_path}/${SUBJ}/${anat_file_folder}/${SUBJ}*T1*_brain.nii.gz`
				anatfile_nonbetted_fullpath=`ls ${dwi_mainfolder_path}/${SUBJ}/${anat_file_folder}/${SUBJ}*T1*_stdMNI.nii.gz`
				anatfile_nameonly=`ls ${dwi_mainfolder_path}/${SUBJ}/${anat_file_folder}/${SUBJ}*T1*_brain.nii.gz | awk -F/ '{print $NF}'`
				anatfile_nonbetted_nameonly=`ls ${dwi_mainfolder_path}/${SUBJ}/${anat_file_folder}/${SUBJ}*T1*_stdMNI.nii.gz | awk -F/ '{print $NF}'`

			elif [ ${fslanat_output_path} = subj_anat_folder ]
			then
				# Colecting info for the ANATOMICAL file for full analysis
				anatfile_fullpath=`ls ${dwi_mainfolder_path}/${SUBJ}/${anat_file_folder}/T1_biascorr_brain.nii.gz`
				anatfile_nonbetted_fullpath=`ls ${dwi_mainfolder_path}/${SUBJ}/${anat_file_folder}/T1_biascorr.nii.gz`
				anatfile_nameonly=`ls ${dwi_mainfolder_path}/${SUBJ}/${anat_file_folder}/T1_biascorr_brain.nii.gz | awk -F/ '{print $NF}'`
				anatfile_nonbetted_nameonly=`ls ${dwi_mainfolder_path}/${SUBJ}/${anat_file_folder}/T1_biascorr.nii.gz | awk -F/ '{print $NF}'`

			elif [ ${fslanat_output_path} = separate_folder ]
			then
				# Colecting info for the ANATOMICAL file for full analysis
				anatfile_fullpath=`ls ${anat_file_folder}/${SUBJ}*T1*.anat/T1_biascorr_brain.nii.gz`
				anatfile_nonbetted_fullpath=`ls ${anat_file_folder}/${SUBJ}*T1*.anat/T1_biascorr.nii.gz`
				anatfile_nameonly=`ls ${anat_file_folder}/${SUBJ}*T1*.anat/T1_biascorr_brain.nii.gz | awk -F/ '{print $NF}'`
				anatfile_nonbetted_nameonly=`ls ${anat_file_folder}/${SUBJ}*T1*.anat/T1_biascorr.nii.gz | awk -F/ '{print $NF}'`
			fi

			if [ -f ${anatfile_fullpath} ] && [ -f ${anatfile_nonbetted_fullpath} ]  # Checking if both betted and non-betted ANATOMICAL images are files within the above path
			then
				echo -e "\n"
				echo -e "\tANATOMICAL file with non-brain tissue removed to be used for ### ${SUBJ} ###: ${anatfile_nameonly}"
				echo -en "\tANATOMICAL file non-betted to be used for ### ${SUBJ} ###: ${anatfile_nonbetted_nameonly} "

				# Just so the user have a second to read it
				sleep 1

# 				# Variable to allow or not creation of individualized design file
# 				proceed_registration=yes
			else
				echo
				echo -e "\tSkipping subject \"${SUBJ}\" as either skull-stripped or non-skull-stripped ANATOMICAL file(s) was/were found"

# 				# Variable to allow or not creation of individualized design file
# 				proceed_registration=no

				# Asking the user to allow to continue
				echo
				echo -en "Press any key to continue "
				read -n 1 anykey
			fi

			# FUNCTION CALL: Calls the function "registration_process" to proceed with registration processing
			registration_process
		done

		# Checking if there is a PPSS processing file
		if [ -f "${temp_folder}/${ppss_command_file}" ] # Checking if this file exists and is a file
		then
			# Calling the function "parallel_processing_ppss" to run the motion outliers command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
			# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
			parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

			echo -e "\n"
			echo -e "Finished processing at: `current_date_time 2`"
		else
			echo
			echo -en "*** No PPSS processing file was generated - please check the reason ***"
			echo -en "Press any key to continue "
			read -n1 anykey
		fi

		###### Listing the subjects processed ######
		# FUNCTION CALL: Calls the function "subjects_listed2process" in "mainscrcall_funclib" to list to the user all subjects processed and those not processed by the script invoking it
		subjects_listed2process
		################################################

		# Ask for user input to continue
		echo
		echo -en "Press any key to continue to the PROCESSING menu "
		read -n1 anykey

		echo
		echo -e "Finished processing for the above subjects"

		break
		;;
	*)
		echo -e "No valid option chosen"
		echo -en "Please re-enter an option "

		sleep 2
		;;
	esac
done

# Creating a log file. STEP 2 of 2 = finish call
# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 1 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. List of subjects processed
log_file_scripts_used finish "${SUBJLIST}"

# Removing temporary folders and files created
rm -r ${temp_folder} 2> /dev/null