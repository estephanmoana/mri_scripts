#! /bin/bash

# Script to run FSL 1st level full analysis (prestats+poststats+registration)

# Sourcing of functions library files #
. mainscrcall_funclib

# Setting Ctrl + C as key combination to go back to PROCESSING menu. Also signals to the log file (=if there is one) that this script was interrupted
trap "echo -en '\n\nGoing back to the PROCESSING menu '; sleep 2; log_file_scripts_used interrupt; exit" SIGINT

# Checking if variables are not empty
emptvar=${MEDIA}
var_checked="THE MAIN FOLDER HOLDING MRI DATA"
checkemptvar

emptvar=${EXPERIMENT}
var_checked="THE EXPERIMENT NAME"
checkemptvar

emptvar="${SUBJLIST}"
var_checked="THE SUBJECT(S) TO BE PROCESSED"
checkemptvar

emptvar="${SUBJS_FOLDERS_PATH}"
var_checked="THE FOLDER CONTAINING ALL SUBJECTS' FOLDERS"
checkemptvar

# Checking if the folder for analysis was created
foldercheck=${MEDIA}/${EXPERIMENT}/${analysis_folder_2ndlevel}
checkfoldexist2

##########			FUNCTIONS USED IN THIS SCRIPT			##########
function feat_template_check {
# This function will check if the "feat_templates" folder exists and if so, it shows the folder's contents to the user
while [ 1 ]
do
	echo -e "\n"
	echo -e "\tPlease check if you created your FEAT ANALYSIS template and it is listed in here:"

	# Testing if "feat_templates is a valid folder
	if [ -d ${FULLPATH}/${feat_templates_folder} ]
	then
		echo
		ls ${FULLPATH}/${feat_templates_folder}/*.fsf | sed 's!'${FULLPATH}/${feat_templates_folder}/'!!' | sed "=" | sed 'N; s/\n/) /'

		# Here the user will choose the template file needed
		echo
		echo -en "Please enter the number corresponding to the .fsf template file of interest from the list above: "
		read feat_template_analysis

		# Collecting the fsf files available into a variable to be used in the FUNCTION "NUMBERED_LIST" (functionslibr_FSL)
		var1_available=`ls ${FULLPATH}/${feat_templates_folder}/*.fsf | sed 's!'${FULLPATH}/${feat_templates_folder}/'!!' | sed "=" | sed 'N; s/\n/=/'` # variable with all the files in a numbered list
		var2_list="${feat_template_analysis}" # The numbers chosen by the user corresponding to the files to be used

		# Calling the function "numbered_list_display" to present the anatomical files available in a numbered list to the user. Note the parameters to be passed on to the function
		numbered_list_display "${var1_available}" "${var2_list}"

		# Retrieving the results of the function above from the variable "files_to_use" into a variable to be used by the present script
		feat_template_analysis=`echo ${files_to_use}` # Need to use echo here instead of just quotes around the variable "files_to_use" in order to eliminate the trailing spaces

		# Cleaning the contents of the variables below
		unset files_to_use

		# Checking if the file chosen above is a .fsf file
		# Assigning a variable with a file extension as output to check if the entered file above is a .fsf file
		fsf_file=`if echo ${FULLPATH}/${feat_templates_folder}/${feat_template_analysis} | grep -q '.fsf'; then echo fsf; else echo wrong; fi`

		# Checking if the full_analysis_template file exists, and if its extension is "fsf"
		if [ -f ${FULLPATH}/${feat_templates_folder}/${feat_template_analysis} ] && [ ${fsf_file} = fsf ]
		then
			echo -e "\n"
			echo -e "The template file ### ${feat_template_analysis} ### exists and it is a .fsf file as needed"

			##### VARIABLE USED IN OTHER PARTS OF THE SCRIPT #####
			# This will create a variable to label the fsf file to be created later in this script
			FEAT_TEMPLATE_USED=`echo ${feat_template_analysis} | sed 's/.fsf//'`

			echo -en "Press any key to continue "
			read -n1 anykey

			break
		else
			echo
			echo -en "Full analysis template file entered does not exist or it is not a .fsf file - please check "

			sleep 2
		fi
	else
		echo
		echo -e "There is no \"feat_templates\" folder - please check this and/or create this folder before proceeding\n"

		echo -en "Press any key to go back to PROCESSING MENU "
		read anykey

		exit
	fi
done
}

function subject_copes_check {
# This function will check if the subject has the number of copes equal to the one entered by the user, then it selects if this subject should be processed or not

##### Checking the number of cope files for the subject being processed #####

# Listing the number of copes into a variable. Note the use of the "sed" command to remove the spaces in the output of the command "wc"
for item in ${identifiers}
do
	number_copes_listed_identifier=`ls ${FULLPATH}/${analysis_folder_1stlevel}/${SUBJ}_*${item}.feat/stats/cope* 2> /dev/null | wc -l | sed 's/       //'`

	number_copes_listed_allidentifiers="${number_copes_listed_allidentifiers} ${number_copes_listed_identifier}"
done

# Summing the number of copes for each identifier form the loop above. Note the use of the command "tr", which changes the spaces between the integers into "=" signs for "bc" to perform the calculations. Note: cannot use quotes around the variable "${number_copes_listed_allidentifiers}" below, as it brings up an error to the "tr" command.
number_copes_listed=`echo ${number_copes_listed_allidentifiers} | tr ' ' '+' | bc`

# Cleaning the contents of the variable below
unset number_copes_listed_allidentifiers

# Checking if the variable for number of copes is not empty
if [ -n "${number_copes_listed}" ]
then
	# Checking if the expected number and the number found of copes match
	if [ ${expected_copes} = ${number_copes_listed} ]
	then
		# FUNCTIONAL CALL: function "design_file_individualization" to create an individualized prestats design.fsf file
		design_file_individualization

		# Gathering this subject into a variable for processing. This will be used by the function "subjects_processed" in functionslibr_FSL
		subj_process="${subj_process} ${SUBJ}"

	elif [ ${expected_copes} != ${number_copes_listed} ]
	then
		echo
		echo -e "Subject \"${SUBJ}\" has a DIFFERENT number of cope files in the \"stats\" subfolder of the feat folder, and it will NOT be processed"
		echo -e "# copes expected = ${expected_copes}"
		echo -e "# copes found = ${number_copes_listed}"

		echo
		echo -en "Press any key to continue "
		read -n1 anykey

		# Gathering this subject into a variable for NOT processing. This will be used by the function "subjects_processed" in functionslibr_FSL
		subj_NOT_process="${subj_NOT_process} ${SUBJ}"
	fi
else
	echo
	echo -e "Subject \"${SUBJ}\" has no copes in the \"stats\" subfolder of the feat folder, and it will NOT be processed"
	echo -en "Press any key to continue "
	read -n1 anykey

	# Gathering this subject into a variable for NOT processing. This will be used by the function "subjects_processed" in functionslibr_FSL
	subj_NOT_process="${subj_NOT_process} ${SUBJ}"
fi
}

function design_file_individualization {
# This function will create the individualized file for the subject being processed

# Giving feedback to the user
echo -e
echo -e "Creating the individualized design.fsf file for subject ### ${SUBJ} ###"

#################################################################

###### VARIABLES IN THE "design.fsf" TEMPLATE THAT CAN BE SUBSTITUTED BY THIS SCRIPT #####
# "Path of output directory
# Line 36 set fmri(outputdir)

# Set number of funcitonal runs to be processed
# Line 51 set fmri(multiple) 2

# Set path of functional run(s) to be processed
# Line 281 set feat_files(1)

#############################################################################################

###### STARTS SUBSTITUTION OF TEMPLATE VARIABLES #####

# Creating the temporary fsf text file for the FEAT analysis
echo -e "\n\n\n############################################################" > ${temp_folder}/temp_individualized_2ndlevel_analysis.fsf
echo -e "##### VARIABLES CREATED TO INDIVIDUALIZE THIS ANALYSIS #####" >> ${temp_folder}/temp_individualized_2ndlevel_analysis.fsf
echo -e "############################################################" >> ${temp_folder}/temp_individualized_2ndlevel_analysis.fsf

# Setting the variable holding the sed commands to delete the appropriate lines of the "design.fsf" template file
linedelete=""

##### NUMBER OF FUNCTIONAL RUNS #####
##### SET NUMBER OF FIRST LEVEL ANALYSES TO BE RUN (HOW MANY FUNCTIONAL RUNS) #####
# Variable to delete the relevant line in the "design.fsf" template file
linedelete="${linedelete} | sed '/^set fmri(multiple)/d'"

numCOPEfiles="\nset fmri(multiple) ${number_copes_listed}\n"

echo -e ${numCOPEfiles} > ${temp_folder}/tempnumCOPEfiles
cat ${temp_folder}/tempnumCOPEfiles >> ${temp_folder}/temp_individualized_2ndlevel_analysis.fsf
###############################################################################

##### LOCATION OF EACH FUNCTIONAL RUN #####
##### SET A FEAT_FILE VARIABLE FOR THE LOCATION OF EACH FUNCTIONAL RUN ####
# Variable to delete the relevant line in the "design.fsf" template file
linedelete="${linedelete} | sed '/^set feat_files/d'"

count_copefiles=1 # Using a variable in case need to modify how many processes to be used
cope_FILES=""

# Loop to go through the IDENTIFIERS in the order entered by the user
for item in ${identifiers}
do
	# Loop to go through eac cope for the IDENTIFIER being processed
	for item2 in `ls ${FULLPATH}/${analysis_folder_1stlevel}/${SUBJ}_*${item}*/stats/cope?.nii.gz 2> /dev/null; ls ${FULLPATH}/${analysis_folder_1stlevel}/${SUBJ}_*${item}*/stats/cope??.nii.gz 2> /dev/null`
	do
		cope_FILES=$cope_FILES"\nset feat_files(${count_copefiles}) \"${item2}\"\n"

		# Adding a unit to the counting variable
		((count_copefiles++))
	done
done

echo -e ${cope_FILES} > ${temp_folder}/tempCOPEfiles
cat ${temp_folder}/tempCOPEfiles >> ${temp_folder}/temp_individualized_2ndlevel_analysis.fsf
###############################################################################

##### OUTPUT DIR ####
##### SETTING THE PATH OF OUTPUT FOLDER AND NAME OF FEAT FOLDER. IT WILL HAVE THE SUBJECT NAME AND THE .FSF FILE NAME #####
# Variable to delete the relevant line(s) in the "design.fsf" template file
linedelete="${linedelete} | sed '/^set fmri(outputdir)/d'"

# Variable holding only the subjID (no scandate) to name the output directory
SUBJID_only=`echo ${SUBJ} | awk -F_ '{print $1}'`

OUTPUT_folder="${FULLPATH}/${analysis_folder_2ndlevel}/${SUBJID_only}_${FEAT_TEMPLATE_USED}"
echo -e "set fmri(outputdir) \"${OUTPUT_folder}\"" > ${temp_folder}/tempoutputdir
cat ${temp_folder}/tempoutputdir >> ${temp_folder}/temp_individualized_2ndlevel_analysis.fsf
###############################################################################

###############################################################################
# 	Remove original entries in the "design.fsf" template file using a sed command (sed '/^pattern/d') that looks for a pattern than deletes the text line right after it.
## Note the use of the command "eval", as if it is not used bash does not accept the piping within the variable "linedelete", and gives out an error
eval cat ${FULLPATH}/${feat_templates_folder}/${feat_template_analysis} "${linedelete}" > ${temp_folder}/temp_2ndlevel_analysis.fsf
###############################################################################

###############################################################################
# Consolidating all variables added to an individualized *.fsf file for a particular subject
cat ${temp_folder}/temp_individualized_2ndlevel_analysis.fsf >> ${temp_folder}/temp_2ndlevel_analysis.fsf
mv ${temp_folder}/temp_2ndlevel_analysis.fsf ${temp_folder}/${SUBJ}_${funcfolder}_${FEAT_TEMPLATE_USED}.fsf
###############################################################################

# Removing all temporary files
rm -f ${temp_folder}/temp*

cd /tmp
}

###########################################################################
###############			MAIN MENU ROUTINE			###############
###########################################################################

################ VARIABLES TO BE USED IN THIS SCRIPT #################
# Variable for the folder within "/tmp" for temporary files
temp_folder=/tmp/ppss_tempdir_FEAT2ndlevel

# Variable with the basename for the file holding the commands for PPSS processing
ppss_command_file=2ndlevel_analysis_list.txt

# Variable to hold the folder name for the template FEAT files
feat_templates_folder=templates_BOLD_feat_design-files/2ndlevel

# Assigning a variable to hold the main location of the files generated by this script
modalities_available="BOLD ASL"

# Variable holding the location of the 1st_level fMRI analysis
analysis_folder_1stlevel=analysis_BOLD_stim-evoked/1stlevel

# Variable holding the location of the 2nd_level fMRI analysis
analysis_folder_2ndlevel=analysis_BOLD_stim-evoked/2ndlevel

######################################################################

######### Script Main menu - Informing the user what this script does and asking for input #########
clear

# Changing directory to /tmp in case the script comits some error - this will make any commands to be run within /tmp, preventing damage to the file system
cd /tmp

# Removing all temporary fsf templates and their temp folder within "/tmp" that might be present from previously aborted processing
rm -rf ${temp_folder} 2> /dev/null

# Creating the temp folder
mkdir ${temp_folder} 2> /dev/null

# Giving instructions to the user
echo -e "########################################################"
echo -e "############	FEAT 2nd level analysys	###############"
echo -e "########################################################"

echo
echo -e "This script will generate a \"design.fsf\" for each subject for FEAT 2nd level analysis processing"
echo -e "Then run all FEAT processes in parallel by using PPSS"
echo -e "*** All output will be located in this folder: ${FULLPATH}/${analysis_folder_2ndlevel} ***"

# Warning for the user to check if a full_analysis_template was created
echo
echo -e "*** You must have create a \"feat_templates\" folder that holds this analysis template. Please remember that the \"templates\" in the folder name is mandatory for the correct functioning of this program ***\n"

echo -e "If you did not create yet the FEAT 2nd level ANALYSIS template, press control+C to go back to main menu"
echo -e "If you need to create the template, use the FEAT GUI to do so and remember to save the file inside the \"feat_templates/2nd_level\" folder"
echo -e "Also, since the template file name will be used to name the output FEAT folder you should name it with an informative name, e.g. \"full_analysis_stimulustype.fsf\""

##### Functions to prepare the processing of the "design.fsf" template file #####

# FUNCTION CALL: Calling function "feat_template_check" to check if the "feat_templates" folder exists and if so, it shows the folder's contents to the user
feat_template_check

# FUNCTIONAL CALL: allowing the user to choose the modalities (BOLD, ASL) to be processed by calling the function "modalities_processing" in "functionslibr_FSL", and storing those modalities in the variable "MODALITIES_PROCESSING_LIST"
modalities_processing

############################################################

##### Functions to allow user to choose which parts are to be modified from the "design.fsf" template file

############################################################

######################
## Start processing ##
######################
# Creating a log file. STEP 1 of 2 = start call
# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
log_file_scripts_used start "2ndlevel_analysis:Perform second level fMRI analysis using FEAT" FSL "(main script) feat command line"

# Giving feedback to the user
echo -e "\n"
echo -e "\tProcessing 2nd level FEAT full analysis for the following subjects:\n"

# Making the subjects within the "SUBJLIST" variable to be listed in a numbered list for the user
# Establishing the initial numbering
count=1

for SUBJ in ${SUBJLIST}
do
	counter=`printf "%02d" ${count}` # This is to add trailing zeros to this number, so instead of "2" you have "02" for example

	echo "${counter}) ${SUBJ}"

	# Adding a unit to the numbering variable
	((count++))
done

# Cleaning the contents of the numbering variable
unset count counter

# Getting processing info from the user
while [ 1 ]
do
	echo
	echo -en "Please enter the number of ### expected cope files ### for EACH subject: "
	read expected_copes_user

	echo
	echo -e "Please enter the ### IDENTIFIER(S) ### to properly select the cope files for each subject"
	echo -e "This IDENTIFIER is derived from the FEAT template used in the 1st level analysis, e.g., \"INTERMINGLED_analysis01\""
	echo -e "IDENTIFIERS can also be checked from the FEAT folders name ouput of the 1st level analysis in the \"1stlevel\" folder"

	echo
	echo -e "\t *** WARNING *** You must enter the IDENTIFIERS in the ### SAME ORDER AS EXPECTED ### by your 2nd level FEAT TEMPLATE"
	echo -e "For example: if you have 3 IDENTIFIERS, and their copes are listed sequentially in the design matrix in the \"Stats\" tab in FEAT, you should enter them as \"IDENTIFIER01 IDENTIFIER02 IDENTIFIER03\"\n"

	echo -en "Please enter the IDENTIFIER(S) here (If more than one, separate by space): "
	read identifiers_user

	# Giving feedback to the user
	echo
	echo -e "You entered the information below"
	echo -e "Number of expected copes for each subject = ${expected_copes_user}"
	echo -e "Identifiers entered in the order to be processed ="

	# Listing the Identifiers in a numbered list
	# Counting variable
	count=1

	for item in ${identifiers_user}
	do
		# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
		counter=`printf "%02d" ${count}`

		echo "${counter}) ${item}"

		# Adding a unit to the numbering variable
		((count++))
	done

	echo
	echo -en "Is this correct? (y/n) "
	read yesno

	if [ ${yesno} = y ]
	then
		# Getting the information entered into the permanent variables
		expected_copes=${expected_copes_user}
		identifiers=${identifiers_user}

		# Checking if the number of copes entered matches the number of copes listeed in the FEAT template file
		# Extracting the number of copes listed in the FEAT template file
		number_copes_fsffile=`grep "^set fmri(multiple)" ${FULLPATH}/${feat_templates_folder}/${feat_template_analysis} | awk '{print $NF}'`

		# Checking for matching
		if [ ${expected_copes} != ${number_copes_fsffile} ]
		then
			echo
			echo -e "### WARNING ####"
			echo -e "The number of copes entered does not match the number listed in the FEAT template"

			echo
			echo -e "Please correct the number of copes entered, or check if you  chose the correct FEAT template"

			echo
			echo -en "Press any key to correct the number of copes entered (or press Ctrl + C to exit) "
			read -n1 anykey
		else
			# Getting out of the "while" loop
			break
		fi
	else
		echo
		echo -en "Please correct the information entered "

		sleep 2
	fi
done

for SUBJ in ${SUBJLIST}
do
	# FUNCTIONAL CALL: function "subject_copes_check" to check if the subject has the number of copes equal to the one entered by the user, then it selects if this subject should be processed or not
	subject_copes_check
done

# Presenting to the user the subjects to be processed, and the ones excluded due to lack of functional runs and/or anatomical file
###### Listing the subjects processed ######
# FUNCTION CALL: Calls the function "subjects_listed2process" in functionslibr_FSL to list to the user all subjects processed and those not processed by the script invoking it
subjects_listed2process
################################################

echo
echo -en "Press any key to proceed with FSL full analysis processing for the subjects listed above "
read anykey

# This will use the fsf templates above in Feat to do the full analysis processing
echo -e "\n"
echo -e "### Starting 2nd level analysis processing using design file \"${FEAT_TEMPLATE_USED}\" for all subjects entered ###"

# Consolidating all subjects to be processed in a list within the PPSS file
for item in `ls ${temp_folder}/*_${FEAT_TEMPLATE_USED}.fsf`
do
	echo "feat ${item}" >> ${temp_folder}/${ppss_command_file}
done

# Calling the function "parallel_processing_ppss" (functionslibr_FSL) to run FEAT command. Note 4 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run; 3) parameter to indicate that the PPSS log files should be deleted by the function 4) list of unique identifiers for differentiating commands, e.g. a list of subjects. NOT USING THE 4th PARAMETER, SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS)
parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

# Creating a log file. STEP 2 of 2 = finish call
# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 1 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. List of subjects processed
log_file_scripts_used finish "${SUBJLIST}"

# Removing all temporary fsf templates and their temp folder within "/tmp" that might be present from previously aborted processing
rm -rf ${temp_folder} 2> /dev/null