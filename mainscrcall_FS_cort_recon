#! /bin/bash

# This script will perform cortical reconstruction with Free Surfer

# Sourcing of functions library files #
. mainscrcall_funclib

# Setting Ctrl + C as key combination to go back to PROCESSING menu. Also signals to the log file (=if there is one) that this script was interrupted
trap "echo -en '\n\nGoing back to the PROCESSING menu '; sleep 2; log_file_scripts_used interrupt; exit" SIGINT

# Checking if variables are not empty
emptvar=${MEDIA}
var_checked="THE MAIN FOLDER HOLDING MRI DATA"
checkemptvar

emptvar=${EXPERIMENT}
var_checked="THE EXPERIMENT NAME"
checkemptvar

emptvar="${SUBJLIST}"
var_checked="THE SUBJECT(S) TO BE PROCESSED"
checkemptvar

emptvar="${SUBJS_FOLDERS_PATH}"
var_checked="THE FOLDER CONTAINING ALL SUBJECTS' FOLDERS"
checkemptvar

##########			FUNCTIONS USED IN THIS SCRIPT			##########
function process_cort_recon {
# This function will prepare a PPSS file for paralell processing of FREESURFER cortical reconstruction

# It uses 1 parameter:
	# 1) The recon-all flag to determine what steps are to be processed

# The "local" before the variable ensure that the variable is limited only to within this function
local autorecon_chosen="$1" # recon-all flag

echo -e "\n"
echo -e "Initiating cortical reconstruction processing:"

	# Checking if a full analysis file was created for the subject before calling FEAT
	for SUBJ in ${subj_recon_process}
	do
		#####################################
		echo "recon-all -subjid ${SUBJ} ${autorecon_chosen}" >> ${temp_folder}/${ppss_command_file}

		##### Creating a LOG file with the commands used for later QA if needed #####
		echo "OS name and version: ${os_nameandversion}; Command: recon-all; Freesurfer `cat $FREESURFER_HOME/build-stamp.txt`; Date and time: `current_date_time 2`" > ${SUBJECTS_DIR}/LOGFILE_cortical-reconstruction_reconall_${SUBJ}.txt

		echo -e "Command \"recon-all\" to process ANATOMICAL files using Freesurfer.\nFlags used and their meaning:\n-all: FULL PROCESSING\n-autorecon1: runs steps 1-5 out of 30\n-autorecon2: runs steps 6-23 out of 30\n-autorecon3: runs steps 24-30 out of 30" >> ${SUBJECTS_DIR}/LOGFILE_cortical-reconstruction_reconall_${SUBJ}.txt

		echo -e "\nrecon-all -subjid ${SUBJ} ${autorecon_chosen}" >> ${SUBJECTS_DIR}/LOGFILE_cortical-reconstruction_reconall_${SUBJ}.txt
		#####################################
	done
}

###########################################################################
###############			MAIN MENU ROUTINE			###############
###########################################################################

##### 			VARIABLES TO BE USED IN THIS SCRIPT 		#####
# Assigning a variable to hold the main location of the files generated by this script
temp_folder=/tmp/ppss_tempdir
ppss_command_file=subjects_cort_recon.txt
######################################################################

# Script Main menu - Informing the user what this script does and asking for input
clear

# Changing directory to /tmp in case the script comits some error - this will make any commands to be run within /tmp, preventing damage to the file system
cd /tmp

# Removing temporary folders and files created, just in case they were not deleted properly by a previously ran script
rm -r ${temp_folder} 2> /dev/null

# Creating a temporary folder to hold the text file with the subjects to be processed
mkdir ${temp_folder} 2> /dev/null

echo -e "###################################################################"
echo -e "This program will perform cortical reconstruction using FREESURFER"
echo -e "###################################################################"

###########################################################
# FUNCTION CALL: Calling function "FS_subj_mainfolder" from "mainscrcall_funclib" to check the FREESURFER main analysis folder path
FS_subj_mainfolder
###########################################################

# Checking if the subjects to be processed have their folders within the "freesurfer_analysis" folder
echo
echo -e "##### Checking if subjects have the ANATOMICAL image to be processed within its folder in the Freesurfer main analysis folder #####"

# Looping through all subjects
for SUBJ in ${SUBJLIST}
do
	# Checking if each subject has a "mri/orig" folder within the main analysis folder
	if [ -d ${SUBJECTS_DIR}/${SUBJ}/mri/orig ]
	then
		# Gathering the ANATOMICAL image file info into variables
		anatomical_filename=`ls -1 ${SUBJECTS_DIR}/${SUBJ}/mri/orig/* | awk -F/ '{print $NF}'`
		anatomical_path=${SUBJECTS_DIR}/${SUBJ}/mri/orig

		echo
		echo -e "Subject ID = ${SUBJ}"
		echo -e "ANATOMICAL image for processing: ${anatomical_filename}"
		echo -e "ANATOMICAL image path: ${anatomical_path}"

		# Gathering this subject into a variable for processing
		subj_recon_process="${subj_recon_process} ${SUBJ}"
	else
		echo
		echo -e "Subject \"${SUBJ}\" does not have a valid folder named \"mri/orig\" folder, and will NOT be processed"

		echo
		echo -en "Press anykey to continue "
		read -n1 anykey

		# Gathering this subject into a variable for NOT processing
		subj_recon_NOT_process="${subj_recon_NOT_process} ${SUBJ}"
	fi
done

# Giving the user option to look at the output above before continuing
echo
echo -en "Press anykey to continue "
read -n1 anykey

# Listing the subjects with valid ANATOMICAL images to be processed to the user
echo -e "\n"
echo -e "Checking the subjects with valid ANATOMICAL images to be processed"

# Checking there are subjects to be processed
if [ -n "${subj_recon_process}" ] # Check if this variable has contents
then
	echo
	echo -e "All subjects listed here will be processed:\n"

	# Making the subjects within the "SUBJLIST" variable to be listed in a numbered list for the user
	# Establishing the initial numbering
	count=1

	for subj in ${subj_recon_process}
	do
		# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
		counter=`printf "%02d" ${count}`

		echo "${counter}) ${subj}"

		# Adding a unit to the numbering variable
		((count++))
	done

	# Cleaning the contents of the numbering variable
	unset count
fi

# Checking there are subjects NOT to be processed
if [ -n "${subj_recon_NOT_process}" ] # Check if this variable has contents
then
	echo
	echo -e "The following subjects will NOT be processed due to lack of a \"mri/orig\" folder:\n"

	# Making the subjects within the "SUBJLIST" variable to be listed in a numbered list for the user
	# Establishing the initial numbering
	count=1

	for subj in ${subj_recon_NOT_process}
	do
		# This is to add trailing zeros to this number, so instead of "2" you have "002" for example. Maybe needed if subject's listing gets mixed up due to numbers like "10" being listed before "2", e.g. 1 10 11 2 3 4
		counter=`printf "%02d" ${count}`

		echo "${counter}) ${subj}"

		# Adding a unit to the numbering variable
		((count++))
	done

	# Cleaning the contents of the numbering variable
	unset count
fi

# MAIN MENU: Showing the user the options to do all steps of "recon-all" or do it step-wise
while [ 1 ]
do
	echo -e "\n"
	echo -e "Please select which steps of \"recon-all\" to run (all or selected ones)"
	echo -e "Remember that you must need to check \"recon-all\" output for any errors after processing is done"

	echo
	echo -e "\\tSelect the \"recon-all\" directive to be used below:\n"

	echo -e "\t1. recon-all -all (FULL PROCESSING, done in 20-30 hrs)\n"

	echo -e "\t2. recon-all -autorecon1 (runs steps 1-5 out of 30, done in about 90 min)"
	echo -e "\t3. recon-all -autorecon2 (runs steps 6-23 out of 30, done in 20+ hrs)"
	echo -e "\t4. recon-all -autorecon3 (runs steps 24-30 out of 30, done in 30-60 min)"

	echo -e "\t0. Abort and go back to PROCESSING MENU\n"

	echo -en "\t\tEnter your option here: "
	read option_recon

	case ${option_recon} in
	0)
		echo -e "\n"
		echo -en "Going back to the PROCESSING MENU "

		sleep 2

		exit
		;;
	1)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "FS_cort_recon:Perform cortical reconstruction using FREESURFER" Freesurfer "(process_cort_recon) recon-all -all"

		# FUNCTION CALL: Calling the "process_cort_recon" function to run the recon-all command
		process_cort_recon -all

		# Calling the function "parallel_processing_ppss" to run the command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
		# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
		parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

		break
		;;
	2)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "FS_cort_recon:Perform cortical reconstruction using FREESURFER" Freesurfer "(process_cort_recon) recon-all -autorecon1"

		# FUNCTION CALL: Calling the "process_cort_recon" function to run the recon-all command
		process_cort_recon -autorecon1

		# Calling the function "parallel_processing_ppss" to run the command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
		# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
		parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

		break
		;;
	3)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "FS_cort_recon:Perform cortical reconstruction using FREESURFER" Freesurfer "(process_cort_recon) recon-all -autorecon2"

		# FUNCTION CALL: Calling the "process_cort_recon" function to run the recon-all command
		process_cort_recon -autorecon2

		# Calling the function "parallel_processing_ppss" to run the command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
		# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
		parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

		break
		;;
	4)
		# Creating a log file. STEP 1 of 2 = start call
		# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 4 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. The calling script and its purposes (separated by a semicolon); 3. The analysis software type (FSL, Freesurfer) related to the script's use; 4. The tools used (e.g., fsl_motion_outliers, fslreorient2std, etc.)
		log_file_scripts_used start "FS_cort_recon:Perform cortical reconstruction using FREESURFER" Freesurfer "(process_cort_recon) recon-all -autorecon3"

		# FUNCTION CALL: Calling the "process_cort_recon" function to run the recon-all command
		process_cort_recon -autorecon3

		# Calling the function "parallel_processing_ppss" to run the command. Note 2 parameters: 1) path to the folder holding the temporary files for this script; 2) the name of the files holding the commands for PPSS to run. Added a 3rd parameter to signal the function "parallel_processing_ppss" that the PPSS log files will be deleted there.
		# Not using the 4th parameter (list of unique identifiers for differentiating commands, e.g. a list of subjects), SO ALL SUBJECT'S FILES ARE PROCESSED IN A ROW, INSTEAD OF ON A SUBJECT-BY-SUBJECT BASIS (FASTER AND OPTIMIZED USE OF PPSS).
		parallel_processing_ppss ${temp_folder} ${ppss_command_file} ppss_function

		break
		;;
	*)
		echo
		echo -e "No valid option chosen"
		echo -en "Please re-enter an option "

		sleep 2
		;;
	esac
done

# Removing temporary folders and files created
rm -r ${temp_folder} 2> /dev/null

# Creating a log file. STEP 2 of 2 = finish call
# Calling the function "log_file_scripts_used" in "functionslibr_FSL" to output the characteristics of this script. It uses 1 parameters: 1. Flag to signal if this function is being called when the calling script starts or when it has finished; 2. List of subjects processed
log_file_scripts_used finish "${SUBJLIST}"